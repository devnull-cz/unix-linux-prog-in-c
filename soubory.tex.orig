%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Systém souborù

changequote([[[, ]]])

\pdfbookmark[1]{systém souborù}{filesys}

\begin{slide}
\sltitle{Systém souborù}
\setlength{\baselineskip}{0.8\baselineskip}
\begin{itemize}
\item adresáøe tvoøí strom, spolu se soubory acyklický graf (na
jeden soubor mù¾e existovat více odkazù). 
\item ka¾dý adresáø navíc obsahuje odkaz na sebe '\texttt{.}'
(teèka) a na nadøazený adresáø '\texttt{..}' (dvì teèky). 
\item pomocí rozhraní systému souborù se pøistupuje i k dal¹ím
entitám v~systému: 
    \begin{itemize2}
\setlength{\itemsep}{-3pt}
\setlength{\topsep}{0pt}
    \item periferní zaøízení 
    \item pojmenované roury 
    \item sokety
    \item procesy (\texttt{/proc}) 
    \item pamì» (\texttt{/dev/mem}, \texttt{/dev/kmem}) 
    \item pseudosoubory (\texttt{/dev/tty}, \texttt{/dev/fd/0},\dots) 
    \end{itemize2}
\item z pohledu jádra je ka¾dý obyèejný soubor pole bajtù. 
\item v¹echny (i sí»ové) disky jsou zapojeny do jednoho stromu.
\end{itemize}
\end{slide}

\label{DEVFS}

\begin{itemize}
\item zaøízení, soubory v \texttt{/proc}, terminály, pamì» atd. jsou v¹echno
jeden typ souborù - speciální soubory. Dal¹í typy souborù - regulární soubor
(hardlink), adresáø, pojmenovaná roura, socket, symbolický link.
\item novì vytvoøený adresáø má na sebe 2 odkazy -- jeden z nadøazeného
adresáøe, a jeden sám na sebe, '\texttt{.}':

\begin{verbatim}
$ mkdir test
$ ls -ld test
drwx------   2 janp     staff        512 Mar 23 12:46 test
\end{verbatim}

\item root mù¾e v nìkterých systémech strukturu adresáøù zacyklit, ale tím
zmate utility pro procházení filesystému; moc se cyklické struktury
nepou¾ívají. Symbolické linky na adresáøe fungují v¹ude.
\item pojmenované roury (viz strana \pageref{MKFIFO}) lze pou¾ít i mezi
procesy, které nejsou pøíbuzensky spøíznìné. Jinak fungují stejnì jako
nepojmenované roury.
\item zmiòované sokety jsou v doménì UNIX, tj. slou¾í pro komunikaci v rámci
jednoho systému. Sokety z domény INET, pøes které probíhá sí»ová komunikace,
se v systému souborù neobjevují. Sí»ová komunikace zaèíná na stranì
\pageref{NETWORKING}.
\item debuggery pou¾ívají pamì»ové obrazy procesù dostupné v \texttt{/proc}.
Ve vìt¹inì u{}nix-like systémù obsahuje podstrom \texttt{/proc} údaje o jádru
systému a bì¾ících procesech ve formì textových souborù.
\item dne¹ní moderní unixy mívají speciální filesystém \emph{devfs}, jeho¾
obsah odrá¾í aktuální konfiguraci systému co se týèe pøipojených zaøízení. Tj.
napø. pøi pøipojení USB sticku se v \texttt{/dev} objeví pøíslu¹né diskové
zaøízení. Po fyzickém odpojení zaøízení odkaz z adresáøové struktury opìt
zmizí.
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Jednotný hierarchický systém souborù}
\begin{center}
\input{img/tex/fstree.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item svazek (angl. \emph{file system}) je èást souborového systému, kterou lze
samostatnì vytvoøit, pøipojit, zru¹it... Ka¾dý filesystém mù¾e mít jinou vnitøní
strukturu (\texttt{s5}, \texttt{ufs}, \texttt{ext2}, \texttt{xfs}, atd.) a mù¾e
být ulo¾en na lokálním disku nebo na jiném poèítaèi a pøístupný po síti
(\texttt{nfs}, \texttt{afs}). 
\item po startu jádra je pøipojený jen koøenový filesystém, dal¹í filesystémy se
zapojují do hierarchie na místa adresáøù pøíkazem \texttt{mount}. Tento pøíkaz
je mo¾né spustit ruènì (u¾ivatel root libovolnì, ostatní pouze na nìkterých
systémech a s~omezeními) nebo automaticky bìhem inicializace systému, kdy se
typicky øídí obsahem souboru \texttt{/etc/fstab}. Pøed zastavením systému se
filesystémy odpojují pøíkazem \texttt{umount}.
\item dal¹í mo¾nost je pøipojení filesystému na ¾ádost pøi prvním pøístupu a
jeho odpojení po urèité dobì neèinnosti. Tuto funkci zaji¹»uje démon
\emph{automounter} (\texttt{autofs}, \texttt{automount}, \texttt{amd}).
\item UNIX nemá ¾ádné A, B, C, D\dots disky apod.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item slovo \emph{svazek} jsem teï pravdìpodobnì pou¾il naposled
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{typická skladba adresáøù}{hier}

\begin{slide}
\sltitle{Typická skladba adresáøù}
\begin{tabular}{l@{\hspace{3ex}\dots\hspace{3ex}}l}
\texttt{/bin} & základní systémové pøíkazy\\
\texttt{/dev} & speciální soubory (zaøízení, devices)\\
\texttt{/etc} & konfiguraèní adresáø\\
\texttt{/lib} & základní systémové knihovny\\
\texttt{/tmp} & veøejný adresáø pro doèasné soubory\\
\texttt{/home} & koøen domovských adresáøù\\
\texttt{/var/adm} & administrativní soubory (ne na BSD) \\
\texttt{/usr/in{}clude} & hlavièkové soubory pro C\\
\texttt{/usr/local} & lokálnì instalovaný software\\
\texttt{/usr/man} & manuálové stránky\\
\texttt{/var/spool} & spool (po¹ta, tisk,...)
\end{tabular}
\end{slide}

\begin{itemize}
\item v \texttt{/bin}, \texttt{/lib}, \texttt{/sbin} jsou pøíkazy a knihovny
potøebné pøi startu systému, kdy je pøipojen pouze koøenový filesystém. Ostatní
pøíkazy a knihovny jsou typicky v \texttt{/usr/bin}, \texttt{/usr/lib} a
\texttt{/usr/sbin}. \texttt{/usr} bývá èasto samostatný filesystém, èím¾ jeho
obsah není dostupný bìhem startu systému.
\item \texttt{s} v \texttt{sbin} znaèí ,,system'', ne SUID. Jsou to binárky, u
kterých se pøedpokládá, ¾e je bì¾ný u¾ivatel nebude typicky potøebovat.
\item podstrom \texttt{/usr} obsahuje soubory, které se nemìní pøi bì¾ném
provozu a nejsou závislé na konkrétním poèítaèi. Proto by mìl jít sdílet
read-only. Na své stanici doma ho ale vìt¹inou budete mít read-write.
\item \texttt{/lib} typicky obsahuje knihovny potøebné pro programy z koøenového
svazku. Pokud by v¹echny knihovny byly v \texttt{/usr/lib} a \texttt{/usr} byl
samostatný svazek, problém s pøipojením \texttt{/usr} by kompletnì ochromil celý
systém, proto¾e by ne¹lo spustit nic. Nìkdy to systémy øe¹í tak, ¾e koøenový
svazek obsahuje sadu základních programù, které jsou staticky slinkované.
Napøíklad FreeBSD má takové binárky v adresáøi \texttt{/rescue}, má ale i
samostatné adresáøe \texttt{/lib} a \texttt{/usr/lib}.
\item v podstromu \texttt{/var} jsou data, která se za provozu mìní a jsou
specifická pro ka¾dý poèítaè.
\item rùzné systémy i instalace jednoho systému se èasto li¹í.
\item \texttt{hier(7)} na FreeBSD a Linuxu popisuje adresáøovou hierarchii
tohoto systému, Solaris má \texttt{filesystem(5)}.
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Pøístup k periferním zaøízením}
\begin{itemize}
\item adresáø \texttt{/dev} obsahuje speciální soubory zaøízení.
Proces otevøe speciální soubor systémovým voláním \texttt{open()} a
dále komunikuje se zaøízením pomocí volání \texttt{read()},
\texttt{write()}, \texttt{ioctl()}, apod. 
\item speciální soubory se dìlí na 
    \begin{itemize2}
    \item \emsl{znakové} \dots{} data se pøená¹í pøímo mezi procesem a
    ovladaèem zaøízení, napø. sériové porty 
    \item \emsl{blokové} \dots{} data prochází systémovou
    vyrovnávací pamìtí (buffer cache) po blocích pevnì dané
    velikosti, napø. disky 
    \end{itemize2}
\item speciální soubor identifikuje zaøízení dvìma èísly 
    \begin{itemize2}
    \item \emsl{hlavní (major) èíslo} \dots{} èíslo ovladaèe v jádru 
    \item \emsl{vedlej¹í (minor) èíslo} \dots{} èíslo v rámci
    jednoho ovladaèe
    \end{itemize2}
\end{itemize}
\end{slide}

\begin{itemize}
\item vyrovnávací pamìti (cache) urychlují periferní operace. Pøi ètení se data
hledají nejprve v~bufferu. Teprve kdy¾ nejsou k dispozici, tak se ètou z disku.
Pøi pøí¹tím ètení stejného bloku jsou data v bufferu. Pøi zápisu se data ulo¾í
do bufferu. Na disk je systém pøepí¹e pozdìji. Lze si vynutit i okam¾itý zápis
dat na disk. Dnes ji¾ cache typicky není samostatná struktura, v¹e je zastøe¹eno
modulem vitruální pamìti.
\item disky v UNIXu jsou obvykle pøístupné pøes znakové (pou¾ívané pøi
\texttt{mkfs} -- vytvoøení svazku -- a \texttt{fsck} -- kontrola konzistence) i
blokové rozhraní (pou¾ívané pøi normálním provozu systému souborù). Nìkteré
systémy (FreeBSD) ale u¾ v \texttt{/dev} vùbec soubory pro bloková zaøízení
nemají, pouze znaková.
\item døíve musel administrátor systému po zmìnì hardwarové konfigurace upravit
obsah adresáøe \texttt{/dev} skriptem \texttt{MAKEDEV} nebo ruènì. Dnes (Linux,
IRIX, Free\-BSD, Solaris, \dots) ji¾ speciální soubory dynamicky vznikají a
zanikají podle toho, jak jádro detekuje pøidání nebo odebrání hardwarových
komponent (viz \emph{devfs} na stranì \pageref{DEVFS}).
\item okam¾itý zápis na disk lze vynutit pøes \texttt{O\_DIRECT} command ve
volání \texttt{fcntl}.
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Fyzické ulo¾ení systému souborù}
\begin{itemize}
\item \emsl{systém souborù} (svazek, \emsl{filesystem}) lze vytvoøit na: 
    \begin{itemize2}
    \item \emsl{oddílu disku} (\emsl{partition}) -- èást disku, na jednom
    disku mù¾e být více oddílù 
    \item \emsl{logickém oddílu} (\emsl{logical volume}) -- takto lze spojit
    více oddílù, které mohou být i na nìkolika discích, do jednoho svazku. 
    \end{itemize2}
\item dal¹í mo¾nosti: striping, mirroring, RAID
\end{itemize}
\begin{center}
\input{img/tex/partitions.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item výraz systém souborù se pou¾ívá v nìkolika významech:
    \begin{itemize}
    \item jeden filesystém, tj. to, co vyrobí pøíkaz \texttt{mkfs}
    \item celá hierarchie pøipojených svazkù v systému (výstup pøíkazu
    \texttt{mount})
    \item zpùsob organizace svazku (tj. typ fs) a tomu odpovídající
    modul jádra, který s daty manipuluje (UFS2, Ext3, XFS, ...)
    \end{itemize}
\item striping je od slova stripe, ne strip; podle toho se také
vyslovuje. Znamená, ¾e za sebou následující bloky dat se ukládají
paralelnì na rùzné disky a tím se zvy¹uje pøenosová rychlost.
\item mirroring ukládá kopie dat více diskù pro pøípad havárie nìkterého z nich.
\item paritní disky: data se ukládají na dva disky, na tøetí se ukládá XOR
prvních dvou, po havárii libovolného disku jsou v¹echna data stále èitelná.
\item jednotlivé úrovnì RAID (Redundant Array of Inexpensive Disks)
zahrnují striping, mirroring a vyu¾ití paritních diskù.
\item na terminologii je tøeba dát velký pozor. Napø. to, co se v
DOS svìtì nazývá \emph{partition}, se v BSD nazývá \emph{slice}.
Tam jsou pak partitions definovány v rámci jednoho slice a v nich se
vytváøejí filesystémy.
\item pokud vás to zajímá nebo se s tím setkáváte v praxi, doporuèuji va¹í
pozornosti ZFS, co¾ je filesystém a mana¾er logických oddílù v jednom. Ze
Solarisu se ji¾ dostal do FreeBSD od verze 7.0. Mù¾ete okam¾itì zapomenout na
jednotlivé disky, co je dùle¾ité je pouze celková disková kapacita v systému.
\end{itemize}

%%%%%

\pdfbookmark[1]{systém souborù v UNIX System V}{sysVfs}

\begin{slide}
\sltitle{Organizace systému souborù \texttt{s5}}
\begin{center}
\input{img/tex/s5.tex}
\end{center}
\end{slide}

\begin{itemize}
\item pùvodní UNIXový systém souborù standardnì pou¾ívaný do verze
System V Release 3; v BSD se primárnì pou¾íval do verze 4.1
\item vlastnosti:
    \begin{itemize}
    \item bloky délky 512, 1024 nebo 2048 bajtù 
    \item jediný (neduplikovaný) superblok
    \item datový prostor pevnì rozdìl{}ený na oblast \emph{i-uzlù} a
    oblast \emph{datových blokù}
    \item pøi velikosti bloku 1024 bajtù byla teoretická velikost
    filesystému pøes 16 GB
    \end{itemize}
\item \emph{boot block} -- pro ulo¾ení zavadìèe OSu
\item \emph{superblok} -- základní informace o svazku: poèet blokù pro i-uzly,
poèet blokù svazku, seznam volných blokù (pokraèuje ve volných blocích), seznam
volných i-uzlù (po vyèerpání se prohledává tabulka i-uzlù), zámky pro seznamy
vol\-ných blokù a i-uzlù, pøíznak modifikace pou¾ívaný pro kontrolu korektního
odpojení svazku, èas poslední aktualizace, informace o zaøízení
\item \emph{i-uzel} -- typ souboru, pøístupová práva, vlastník, skupina, èasy
posledního pøístupu, modifikace dat a modifikace i-uzlu, poèet odkazù na soubor,
velikost souboru, 10 odkazù na datové bloky a 3 odkazy na nepøímé bloky. Pozor
na to, ¾e èas vytvoøení souboru není ulo¾en.
\item maximální velikost souboru: 2113674 blokù, tj. pøibli¾nì 1 GB pøi pou¾ití
blokù velikosti 512 B
\item jména souborù -- max. 14 znakù (14 + 2 = 16, tedy mocnina dvou a tedy
bezproblémové ulo¾ení adresáøových polo¾ek do blokù)
\item pøi pou¾ití tohoto filesystému byla výkonnost diskù vyu¾ita jen cca na 2\%
a rychlost ètení byla v øádu jen nìkolika desítek kilobajtù za sekundu (!!!)
\item pro srovnání -- MS-DOS 2.0 z roku 1983 podporoval pouze FAT12, poèítající
s maximální velikostí filesystému 16 MB. Velikost svazku do 2 GB byla umo¾nìna
a¾ ve verzi 4.0 (1988); tato verze zároveò zavedla diskové vyrovnávací pamìti,
tedy to, co UNIX má od svého vzniku v roce 1970.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
%\begin{itemize}
%\item
%\end{itemize}

\begin{itemize}
\item 3 úrovnì bootování FreeBSD, jeho \emph{loader} má 213KB
\end{itemize}

]]])

%%%%%

\begin{slide}
\sltitle{Navigace v adresáøové struktuøe}
\begin{center}
\input{img/tex/nav_adr.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item kdy¾ cesta zaèíná znakem '\texttt{/}', zaèíná navigace v koøenovém
adresáøi, jinak zaène v~pracovním adresáøi procesu.
\item koøenový adresáø má typicky èíslo 2. 0 je pro oznaèení prázdného uzlu a
1 byla døíve pou¾ívaná pro soubor, do kterého se vkládaly vadné bloky, aby je
systém u¾ dále nepou¾íval.

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item v ZFS má koøenový adresáø èíslo 3. To je dùsledek toho jak se
vytváøí ZFS file system. Ze zfs-discuss@opensolaris.org: If you look at
\texttt{zfs\_create\_fs()}, you will see the first 3 items created are:
\begin{itemize}
\item Create zap object used for SA attribute registration
\item Create a delete queue.
\item Create root znode.
\end{itemize}
Hence, inode 3.
\end{itemize}
]]])

\item cesta ve které je více lomítek za sebou je stále platná, tj.
\texttt{///a///b///c} je ekvivaletní \texttt{/a/b/c}.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item TODO -- ukládání adresáøových polo¾ek v BSD, stromy, hashing,
dirhash, readdir(3) kód, \dots -- asi novy slajd
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{linky a jejich vlastnosti}{links}

\begin{slide}
\sltitle{Linky}
\begin{center}
\input{img/tex/linky.tex}
\end{center}

Hard linky lze vytváøet pouze v rámci jednoho (logického)
filesystému.
\end{slide}

\begin{itemize}
\item to co ``normálnì'' vidíte pøi výpisu adresáøù jsou vìt¹inou hardlinky,
tak¾e rozdìl{}ení není na soubory, hardlinky a symbolické linky. Co se týèe
souborù, jsou \emsl{pouze} hardlinky a symlinky.

\begin{description}
\item[hardlink]~

    \begin{itemize}
    \item odkaz na stejný i-uzel
    \item vlastnì druhé jméno souboru
    \item není rozdíl mezi originálem a hardlinkem
    \item lze vytváøet jen v rámci filesystému
    \item nelze vytváøet pro adresáøe
    \end{itemize}
\item [symbolický link (symlink, softlink)]~

    \begin{itemize}
    \item pouze odkaz na skuteènou cestu k souboru jiného typu (\texttt{ls -l}
    jej o\-zna\-èu\-je '\texttt{l}'), tj. symbolický link je typem odli¹ný od
    bì¾ného souboru a jeho data obsahují obyèejný øetìzec -- jméno cesty, a»
    ji¾ relativní nebo absolutní
    \item odli¹né chování pro originál a link (napø. pøi mazání)
    \item pozor na relativní a absolutní cesty pøi pøesouvání
    symbolického linku
    \item mù¾e ukazovat i na adresáø nebo na neexistující soubor
    \end{itemize}
\end{description}

\item nejjednodu¹¹í zpùsob jak si ovìøit, zda dané dva linky ukazují na
stejný soubor na disku je pou¾ít \texttt{-i} pøepínaè pøíkazu
\texttt{ls}, který vám uká¾e èíslo indexového uzlu.

\begin{verbatim}
$ ls -i /etc/passwd 
172789 /etc/passwd
\end{verbatim}
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Vylep¹ení systému souborù}
\begin{itemize}
\item cíl: sní¾ení fragmentace souborù, omezení pohybu hlav disku umístìním
i-uzlù a datových blokù blí¾ k sobì 
\item UFS (Unix File System), pùvodnì Berkeley FFS (Fast File System) 
\item èle{}nìní na skupiny cylindrù, ka¾dá skupina obsahuje 
    \begin{itemize}
    \item kopii superbloku 
    \item øídicí blok skupiny 
    \item tabulku i-uzlù 
    \item bitmapy volných i-uzlù a datových blokù 
    \item datové bloky 
    \end{itemize}
\item bloky velikosti 4 a¾ 8 kB, men¹í èásti do fragmentù blokù 
\item jména dlouhá 255 znakù
\end{itemize}
\end{slide}

\begin{itemize}
\item superblok v ka¾dé cylinder skupinì posunut tak, aby superbloky nebyly na
stejné plotnì.
\item dal¹í typy filesystémù: UFS2, Ext3, ReiserFS, XFS, ZFS aj.
\item v \url{http://mff.devnull.cz/pvu/common/docs/filesystems.ps} je
po\-rov\-ná\-ní osmi rùzných filesystémù podle rùzných implementaèních
kritérií; nezahrnuje v sobì ale vývoj posledních let.
\item UFS byl stále 32-bitový, co¾ se odrá¾elo na maximální délce souboru i na
maximální velikosti filesystému. (Oznaèení file systému jako 32-bitového
znamená, ¾e èísla i-uzlù jsou reprezentována jako 32-bitová. To pak dává
teoretický limit pro velikost filesystému.)
\item ¾urnálování (XFS, Ext3, ReiserFS) -- snaha o zmen¹ení nebezpeèí ztráty
dat v pøípadì havárie, urychlení zotavení po havárii
\item ZFS -- moderní 128-bitový filesystém vyvinutý v Sun Microsystems, od
Solarisu 10, teï ji¾ také v FreeBSD 7.
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Vývoj ve správì adresáøových polo¾ek}
\begin{itemize}
\item maximální délka jména souboru 14 znakù nebyla dostaèující
\item FFS -- délka a¾ 255; ka¾dá polo¾ka zároveò obsahuje i její délku
\item nové filesystémy pou¾ívají pro vnitøní strukturu adresáøù rùzné varianty
B-stromù
    \begin{itemize}
    \item výraznì zrychluje práci s adresáøi obsahující velké
    mno¾ství souborù
    \item XFS, JFS, ReiserFS, \dots
    \end{itemize}
\item UFS2 zavádí zpìtnì kompatibilní tzv. \emph{dirhash} pro zrychlení
pøístupu k adresáøùm s velkým poètem souborù
\end{itemize}
\end{slide}

\begin{itemize}
\item \emph{dirhash} pracuje tak, ¾e pøi prvním pøeètení adresáøe se vytvoøí v
pamìti hash struktura, následné pøístupy do adresáøe jsou pak srovnatelné se
systémy pou¾ívající B-stromy. Tímto zpùsobem je dosa¾eno zlep¹ení bez toho,
aby se mìnila struktura filesystému na disku. Taková vylep¹ení ale nelze
v implementaci filesysému dìlat do nekoneèna, nakonec je typicky nutná
zmìna on-disk formátu pro adaptaci na výkonostní po¾adavky (nebo pøechod
na jiný filesystém).
\item malé soubory se èasto ukládají v i-nodech, èím¾ se u¹etøí dal¹í pøístupy
na disk
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Virtuální systém souborù (Virtual File System)}
\begin{center}
\input{img/tex/vfs.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item \emph{FFS} uvedený ve 4.2BSD byl historicky druhý unixový filesystém.
Nìkteøí dodavatelé unixových systémù ho zaèali preferovat vzhledem k jeho
lep¹ímu výkonu a novým mo¾nostem, jiný zùstávali dále u \emph{s5fs} z dùvodu
zpìtné kompatibility. To dále prohlubovalo problém ji¾ tak nedostateèné
interoperability mezi rùznými unixovými systémy. Nìkterým aplikacím navíc plnì
nevyhovoval ani jeden z tìchto filesystémù. Postupnì se také objevovala
potøeba pracovat s ne-unixovými filesystémy, napø. \emph{FAT}. A s rostoucí
popularitou poèítaèových sítí se zvy¹ovala poptávka po sdíl{}ení souborù mezi
jednotlivými systémy, co¾ mìlo za následek vznik distribuovaných filesystémù
-- napø. \emph{NFS} (Network File System).
\item vzhledem k vý¹e popsané situaci bylo jen otázkou èasu, kdy dojde k
fundamentálním zmìnám v infrastruktuøe systému souborù, aby souèasnì
podporoval více typù filesystémù. Vzniklo nìkolik rùzných implementací od
rùzných výrobcù, a¾ se nakonec de facto standardem stala \emph{VFS/vnode}
architektura od firmy Sun Microsystems. V dne¹ní dobì prakticky v¹echny
unixové a u{}nix-like systémy podporují VFS, i kdy¾ èasto se vzájemnì
nekompatibilními úpravami. VFS se poprvé objevilo v roce 1985 v Solarisu 2.0;
brzy bylo pøevzato BSD -- FFS s podporou VFS se zaèal nazývat UFS.
\item hlavní my¹lenka: ka¾dému otevøenému souboru v systému pøíslu¹í struktura
\texttt{file}; to by vlastnì byl jeden slot v námi ji¾ známé systémové tabulce
otevøených souborù. Ta ukazuje na \emph{vnode} (\emph{virtual node}).  Vnode
obsahuje èást nezávislou na konkrétním systému souborù a èást závislou, co¾
mù¾e být napøíklad struktura \emph{inode}. Ta je specifická pro ka¾dý typ
souborového systému. \emsl{Ka¾dý typ filesystému implementuje pevnì danou
sadu funkcí pro jednotlivé operace nad soubory}, na kterou se odkazují v¹echny
virtuální uzly odpovídající danému typu filesystému. \emsl{Tato sada funkcí
tedy definuje vnode interface.} Kdy¾ tedy zavoláte napøíklad \texttt{open},
jádro zavolá pøíslu¹nou implementaci v závislosti na typu filesystému (napø. z
modulu \emph{ext2fs}). Implementaènì závislá èást struktury vnode je pøístupná
pouze z funkcí pøíslu¹ného typu filesystému; jádro do ní tedy ,,nevidí''
pøímo. Jak uvidíte na dal¹ím slajdu, existuje je¹tì jedna sada funkcí, která
se týka práce s filesystémy jako takovými. \emsl{Ta pak definuje VFS interface.}
Tyto \emsl{dvì sady spoleènì} tvoøí vnode/VFS rozhraní, kterému se bì¾nì øíká
jen VFS.
\item (nebudu zkou¹et) -- u speciálních souborù je situace slo¾itìj¹í, v SVR4
struktura \texttt{file} ukazuje na \emph{snode} (\emph{shadow-special-vnode}),
který definuje operace se zaøízením (pomocí souborového systému \emph{spec}) a
prostøednictvím ukazatele \texttt{s\_realvp} se odkazuje na reálný vnode pro
operace se speciálním souborem; ten je potøeba napøíklad pro kontrolu práv
pøístupu. Ka¾dému zaøízení mù¾e odpovídat více speciálních souborù, a tedy více
snodes a pøíslu¹ných reálných vnodes. V¹echny takové snodes pro jedno zaøízení
mají ukazatel \texttt{s\_commonvp} na jeden spoleèný snode, to ale není na
obrázku zachyceno.  Pøi otevøení speciálního souboru se hledá v hash tabulce
snodes otevøených zaøízení po\-lo¾\-ka odpovídající speciálnímu souboru (podle
major a minor èísla zaøízení). Kdy¾ snode není nalezen, vytvoøí se nový. Tento
snode se pak pou¾ívá pøi operacích se zaøízením. Více viz napøíklad [Vahalia].
\end{itemize}

%%%%%

\pdfbookmark[1]{hierarchie souborových systémù}{fshier}

\begin{slide}
\sltitle{Hierarchie souborových systémù}
\begin{center}
\input{img/tex/mount.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item struktura \texttt{vfs} obsahuje implementaènì nezávislé informace o
filesystému, nezávislé na konkrétním typu filesystému, tedy podobnì jako vnode
funguje pro soubory. Tato struktura reprezentuje jeden konkrétní fyzický
filesystém, aktuálnì pøimontovaný do hierarchie souborù. V tomto vázaném seznamu
tedy mù¾e být více struktur stejného typu souborového systému.
\item \texttt{rootvfs} -- odkaz na root file system
\item \texttt{vfsops} -- tabulka funkcí pro konkrétní typ systému souborù
\item \texttt{vfssw[]} -- pole odkazù na tabulky \texttt{vfsops} pro v¹echny
systémem podporované typy filesystémù, z tabulky se vybírá pøi pøipojování
svazku podle typu filesystému zadaného pøi volání \texttt{mount}
\item \texttt{v\_vfsp} -- odkaz z vnode na filesystém (strukturu
\texttt{vfs}), na kterém le¾í soubor reprezentovaný pomocí vnode
\item \texttt{v\_vfsmountedhere} -- pouze ve vnode, který reprezentuje mount
point (adresáø, na kterém je pøipojen koøen jiného filesystému); odkazuje na
strukturu \texttt{vfs} reprezentující pøipojený filesystém
\item \texttt{v\_vnodecovered} -- odkaz na vnode adresáøe, na kterém je
filesystém pøipojen
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill

\begin{itemize}
\item vfsp je napriklad k tomu, ze inodes jsou unikatni v ramci
filesystemu
\end{itemize}

]]])

%%%%%

\begin{slide}
\sltitle{Otevøené soubory z pohledu jádra I.}
\begin{center}
\input{img/tex/open_files1.latex}
\end{center}
\end{slide}

\begin{itemize}
\item toto je nejjednodu¹¹í pohled na tabulky v jádøe které se týkají souborù,
je to pøevzato z [Bach]; dnes to je o nìco slo¾itìj¹í, my¹lenka je ale poøád
stejná. Realitì více se podobající obrázek je na pøí¹tím slajdu.
\item ka¾dý proces má svoji tabulku souborových deskriptorù (\emph{user file
descriptor table})
\item z této tabulky je odkazovnáno na systémovou tabulku otevøených souborù
systému (\emph{file table}; ano, tato tabulka je pouze jedna). Zde je mód
otevøení souboru a také \emsl{aktuální pozice v souboru.}
\item z tabulky otevøených souborù je odkazováno do tabulky naètených inodù v
pamìti. Dnes jsou to tzv. \emph{vnodes} -- \emph{virtual nodes}, ale to v této
chvíli není relevantní.
\item tabulka otevøených souborù systému, která vlastnì vytváøí o jednu úroveò
odkazù navíc, je zde proto, aby rùzné procesy mohly sdílet stejnou aktuální
pozici v souboru.
\item pøi otevøení souboru pomocí volání \texttt{open} se v¾dy alokuje nový
slot v tabulce deskriptorù a také v systémové tabulce otevøených souborù (to
je dùle¾ité!). Sdíl{}ení se pak v rámci jednoho procesu dosáhne duplikací
deskriptorù, kdy více deskriptorù sdílí stejný slot v tabulce otevøených
souborù systému nebo v pøípadì rùzných procesù pak pomocí vytvoøení nového
procesu pomocí volání \texttt{fork}(), viz strana \pageref{FDSHARING}.
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Otevøené soubory z pohledu jádra II.}
\begin{center}
\input{img/tex/open_files.pstex_t}
\end{center}
\end{slide}

\begin{itemize}
\item struktury \texttt{proc} a \texttt{user} vytváøí jádro pro
ka¾dý proces a dr¾í v nich slu¾ební informace o procesu.
\item struktura \texttt{ufchunk} obsahuje \texttt{NFPCHUNK} (obvykle
24) \emph{deskriptorù souborù}, po zaplnìní se alokuje dal¹í
\texttt{ufchunk}.
\item struktura \texttt{file} (\emph{otevøení souboru}) obsahuje mód
souboru (otevøen pro ètení, zápis, atd.), poèet deskriptorù, které
se na ni odkazují, ukazatel na \texttt{vnode} a pozici v souboru.
Jedno otevøení souboru mù¾e být sdíleno více deskriptory, jestli¾e
byl pùvodní deskriptor zkopírován, napø. voláním \texttt{fork()}
nebo \texttt{dup()}.
\item struktura \texttt{cred} obsahuje u¾ivatelskou a skupinovou
identitu procesu, který otevøel soubor.
\item jeden vnode odpovídající jednomu souboru mù¾e být sdíl{}en nìkolika
strukturami file, pokud byl daný soubor vícekrát otevøen.
\item ne v¹echny vnodes jsou asociovány s tabulkou otevøených
souborù. Napø. pøi spu¹tìní programu je potøeba pøistupovat do
spustitelného souboru a proto se alokuje vnode.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item \rednote{podivej se priste na cred strukturu, jak se to
vyuziva v NFS atd.}
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{oprava konzistence metadat souborových systémù}{fsck}

\begin{slide}
\sltitle{Oprava konzistence souborového systému}
\setlength{\baselineskip}{0.8\baselineskip}
\begin{itemize}
\setlength{\itemsep}{0ex}
\item pokud není filesystém pøed zastavením systému korektnì
odpojen, mohou být data v nekonzistentním stavu. 
\item ke kontrole a opravì svazku slou¾í pøíkaz \texttt{fsck}.
Postupnì testuje mo¾né nekonzistence:
    \begin{itemize}
    \setlength{\itemsep}{0ex}
    \item vícenásobné odkazy na stejný blok
    \item odkazy na bloky mimo rozsah datové oblasti systému souborù
    \item ¹patný poèet odkazù na i-uzly
    \item nesprávná velikost souborù a adresáøù
    \item neplatný formát i-uzlù
    \item bloky které nejsou obsazené ani volné
    \item chybný obsah adresáøù
    \item neplatný obsah superbloku
    \end{itemize}
\item operace \texttt{fsck} je èasovì nároèná. 
\item ¾urnálové (napø. XFS v IRIXu, Ext3 v Linuxu) a transakèní (ZFS)
systémy souborù nepotøebují \texttt{fsck}.
\end{itemize}
\end{slide}

\begin{itemize}
\item data se pøepisují na disky z vyrovnávacích pamìtí se
zpo¾dìním. Ulo¾ení v¹ech vyrovnávacích pamìtí lze vynutit systémovým
voláním \texttt{sync()}. Periodicky vyrovnávací pamìti ukládá
zvlá¹tní systémový proces (démon).
\item \texttt{fsck} kontroluje pouze metadata. pokud do¹lo k poru¹e dat
samotných, nepozná to, nato¾ aby s tím nìco mohl udìlat.
\item zde je ukázka \texttt{fsck} na \emsl{odpojený} filesystém:
\begin{verbatim}
toor@shewolf:~# fsck /dev/ad0a 
** /dev/ad0a
** Last Mounted on /mnt/flashcard
** Phase 1 - Check Blocks and Sizes
** Phase 2 - Check Pathnames
** Phase 3 - Check Connectivity
** Phase 4 - Check Reference Counts
** Phase 5 - Check Cyl groups
24 files, 8848 used, 12951 free (7 frags, 1618 blocks, 0.0% fragmentation)
\end{verbatim}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item TODO -- jak to je ve FreeBSD s ukladanim dirty pages
\item priklady na fsck situace: \emsl{(1)} spatny pocet odkazu na
i-node; ukaz to na situace rename s tim, ze ze dvou adresaru ukazuju
na jeden i-node ktery ma jednu referenci (s tim, ze to by se vlastne
nemelo stat); \emsl{(2)} blok ktery nepatri nikam, coz se muze stat
pri smazani souboru -- nejdriv ho vyhodim z mapy obsazenych bloku,
teprve pak ho pridam do mapy volnych bloku. Kdyz nastane crash
mezitim, tak mam blok ktery nepatri nikam.
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{dal¹í zpùsoby pro konzistenci souborových systémù}{fsconsistency}

\begin{slide}
\sltitle{Dal¹í zpùsoby zaji¹tìní konzistence filesystému}
\setlength{\baselineskip}{0.8\baselineskip}
\begin{itemize}
\setlength{\itemsep}{0ex}
\item tradièní UFS -- synchronní zápis metadat
    \begin{itemize}
    \setlength{\itemsep}{0ex}
    \item aplikace vytváøející nový soubor èeká na inicializaci inode na
    disku; tyto operace pracují rychlostí disku a ne rychlostí CPU
    \item asynchronní zápis ale èastìji zpùsobí nekontistenci metadat
    \end{itemize}
\item øe¹ení problémù s nekonzistencí metadat na disku:
    \begin{itemize}
    \setlength{\itemsep}{0ex}
    \item \emph{journalling} -- skupina na sobì závislých operací se
    nejdøíve atomicky ulo¾í do ¾urnálu; pøi problémech se pak ¾urnál
    mù¾e ``pøehrát''
    \item bloky metadat se nejdøíve zapí¹í do non-volatile pamìti
    \item \emph{soft-updates} -- sleduje závislosti mezi ukazately
    na diskové struktury a zapisuje data na disk metodou
    \emph{write-back} tak, ¾e data na disku jsou v¾dy konzistentní
    \item \emph{ZFS} je nový filesystém v Solarisu, který pou¾ívá
    \emph{copy-on-write} transakèní model
    \end{itemize}
\end{itemize}
\end{slide}

\begin{itemize}
\item filesystem \emph{metadata} = inodes, directories, free block
maps
\item \emph{ext2} dokonce defaultnì pou¾ívá asynchronní zápis metadat a je pøi
pou¾ítí synchronního zápisu výraznì pomalej¹í ne¾ UFS
\item závislé operace jsou napøíklad smazání polo¾ky z adresáøe a smazání
diskového inode. Pokud by se stalo, ¾e se nejdøíve sma¾e diskový inode a pak
teprve polo¾ka v adresáøi, pøi výpadku mezi tìmito dvìmi operacemi vniká
nekonzistence -- link ukazuje na diskový soubor, který neexistuje. Není
problém se tomuto vyhnout pøi synchronním zápisu metadat (víme kdy a co
zapisujeme, urèujeme tedy poøadí zápisu), ale pøi metodì write-back je ji¾
nutné øe¹it závislosti jednotlivých blokù na sebe, proto¾e pøi klasické
synchronizaci vyrovnávacích pamìtí na disk jádro nezajímá, který blok se
zapí¹e døív a který pozdìji.
\item èasto jsou bloky na sobì závislé ve smyèce. Soft updates doká¾e takovou
smyèku rozbít tím, ¾e provede \emph{roll-back} a po zápisu pak
\emph{roll-forward}
\item výkon soft updates je srovnatelný výkonu UFS filesystému s asynchronním
zápisem metadat
\item teoreticky soft updates zaruèují, ¾e po rebootu není potøeba pou¾ít
\texttt{fsck}, tj. ¾e filesystém bude v takovém stavu, ¾e je mo¾né nabootovat.
Je v¹ak nutné pou¾ít tzv. \emph{background fsck} pro opravy nezáva¾ných chyb
-- to je pova¾ováno stále za velkou nevýhodu soft updates zvlá¹tì s tím, jak
rostou velikosti bì¾nì pou¾ívaných diskù. Takovou chybou, která nebrání
nabootování, ale je nutné ji odstranit je napøíklad blok, který je oznaèen
jako pou¾itý, ale ¾ádný soubor ho nepou¾ívá.
\item soft updates nejsou v¾dy doporuèovány pro root filesystém. Problém je
to, ¾e ztráta metadat na root filesystému (viz 30-ti sekundová perioda zápisu)
mù¾e být výraznì vìt¹í hrozbou zde ne¾ na \texttt{/usr}, \texttt{/home} atd.
Dal¹í nevýhodou mù¾e být i to, ¾e u soft updates mi smazání velkého souboru
hned neuvolní místo.
\item pøíklad: na bezpeènou operaci rename potøebuju pøi synchronním zápisu
metadat 4 zápisy -- zvý¹ení poètu odkazù v inode, vytvoøení nové
a\-dre\-sá\-øo\-vé polo¾ky, smazání staré, a opìtné sní¾ení poètu odkazù v
inode. Kdykoli by systém spadnul, nenastane nebezpeèná situace. Napøíklad 2
odkazy z adresáøù na inode s referenèním poètem 1 je problém, proto¾e po zru¹ení
jednoho odkazu to bude vypadat, ¾e soubor je stále na disku, kdy¾ u¾ byla jeho
data dávno smazána. Není te¾ké si asi pøedstavit, co by to mohlo znamenat v
pøípadì, ¾e soubor obsahoval opravdu dùle¾itá data -- napøíklad zálohu. Opaèná
situace, tj. jeden odkaz na inode s referencí 2 sice také není správná situace,
ale neohro¾uje to mo¾nost filesystém namontovat a normálnì pou¾ívat. V nejhor¹ím
se stane, ¾e soubor vypadá ¾e ji¾ na disku není a pøitom stále existuje. U soft
updates operace rename vytvoøí kru¾nici, proto¾e nejdøíve je potøeba zapsat
zvý¹ení poètu referencí, pak adresáøové bloky a poté sní¾ení referencí. A
proto¾e zvý¹ení/sní¾ení se týká stejného inode, tak je pøi zápisu tøeba udìlat
roll-back na (øeknìme) 2, zapsat inode na disk, zapsat bloky adresárù a pak
roll-forward na poèet referencí 1. Pøi této akci je nad inodem dr¾en zámek,
tak¾e nikdo nenaète star¹í data. Je jednoduché ukázat, ¾e nelze zapsat ¾ádný z
tìch tøí blokù v kru¾nici tak, jak to je na konci operace rename, ¾e je opravdu
nutný ten roll-back -- mohli bychom uva¾ovat, ¾e inode se vlastnì nezmìnil a
není tøeba øe¹it zda se mù¾e/nemù¾e zapsat; zápis nového adresáøového odkazu bez
zvý¹ení poètu odkazù v inodu by nás toti¾ mohl dostat pøesnì do situace, která
je popsána o pár øádkù vý¹e.
\end{itemize}

%%%%%

\pdfbookmark[1]{pøístupová práva k souborùm}{fsaccessrights}

\begin{slide}
\sltitle{Pøístupová práva}
\begin{center}
\input{img/tex/prava.tex}
\end{center}
\begin{itemize}
\item \emsl{SGID} pro soubor bez práva spu¹tìní pro skupinu v System
V: kontrola zámkù pøi ka¾dém pøístupu (\emsl{mandatory locking})
\item \emsl{sticky bit} pro adresáøe: právo mazat a pøejmenovávat
soubory mají jen vlastníci souborù 
\item \emsl{SGID} pro adresáø: nové soubory budou mít stejnou
skupinu jako adresáø (System V; u BSD systémù to funguje jinak, viz
poznámky)
\end{itemize}
\end{slide}

\begin{itemize}
\item SGID pro adresáøe u BSD systémù zpùsobí, ¾e soubory a podadresáøe
vytvoøené v tomto adresáøi budou mít stejného majitele jako je majitel daného
adresáøe. Nutným pøedpokladem je dále to, ¾e daný UFS filesystém musí být
namontován s suiddir pøíznakem a v jádru je option SUIDDIR (a to není
default). Navíc to nefunguje pro roota. Tato mo¾nost existuje kvùli Sambì a
Nettalku.
\item sticky bit pro adresáøe: pøejmenovat nebo smazat soubor mù¾e jen jeho
vlastník (v~nìkterých implementacích staèí i právo zápisu do souboru),
ne\-sta\-èí právo zápisu do adresáøe. Toto nastavení se pou¾ívá pro veøejné
adresáøe (napø. \texttt{/tmp}).
\item pùvodnì mìl sticky bit význam i pro spustitelné soubory: program s
nastaveným sticky bitem zùstal po ukonèení v pamìti a jeho opìtovné spu¹tìní
bylo rychlej¹í. Dnes se sticky bit v tomto významu u¾ nepou¾ívá.
\item nìkteré filesystémy (XFS, AFS, UFS2, ZFS) mají tzv. access control lists
(ACLs), které dovolují jemnìj¹í pøidìlování práv jednotlivým u¾ivatelùm a
skupinám.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item priklad: ukaz ze kdyz dam adresari skupinu wheel, tak ze i
kdyz je moje, kdyz udelam soubor, tak patri skupine wheel
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{standardní deskriptory}{stdfds}

\begin{slide}
\sltitle{API pro soubory}
\begin{itemize}
\item pøed pou¾itím musí proces ka¾dý soubor nejprve otevøít voláním
\texttt{open()} nebo \texttt{creat()}. 
\item otevøené soubory jsou dostupné pøes \emsl{deskriptory souborù} (file
descriptors), èíslované od 0, více deskriptorù mù¾e sdílet jedno
\emsl{otevøení souboru} (mód ètení/zápis, ukazatel pozice) 
\item standardní deskriptory: 
    \begin{itemize}
    \item 0 \dots{} standardní vstup (jen pro ètení) 
    \item 1 \dots{} standardní výstup (jen pro zápis) 
    \item 2 \dots{} chybový výstup (jen pro zápis) 
    \end{itemize}
\item ètení a zápis z/do souboru: \texttt{read()}, \texttt{write()}
\item zmìna pozice: \texttt{lseek()}, zavøení: \texttt{close()},
informace: \texttt{stat()}, øídicí funkce: \texttt{fcntl()},
práva: \texttt{chmod()}, \dots
\end{itemize}
\end{slide}

\begin{itemize}
\item ka¾dá funkce, která alokuje deskriptory (nejen \texttt{open}
a \texttt{creat}, ale napø. i \texttt{pipe}, \texttt{dup},
\texttt{socket}) alokuje v¾dy volné deskriptory s nejni¾¹ím
èíslem.
\item proces dìdí otevøené soubory od rodièe, tyto soubory nemusí
znovu otvírat. Obvykle (ale ne v¾dy) proces dostane otevøené alespoò
deskriptory 0, 1 a 2.
\item funkce ze souboru \texttt{stdio.h} (napø. \texttt{fopen},
\texttt{fprintf}, \texttt{fscanf}) a odkazy na soubory pomocí ukazatele na
\texttt{FILE} jsou definovány ve standardní knihovnì a pro svojí èinnost
pou¾ívají volání jádra (napø. \texttt{open}, \texttt{write},
\texttt{read}). My se nebudeme knihovnou \texttt{stdio} zabývat.
\end{itemize}

%%%%%

\pdfbookmark[1]{open}{open}

\begin{slide}
\sltitle{Otevøení souboru: \texttt{open()}}
\texttt{int \funnm{open}(const char *\emph{path}, int \emph{oflag},
... );}
\begin{itemize}
\item otevøe soubor daný jménem (cestou) \texttt{path}, vrátí èíslo
jeho deskriptoru (pou¾ije první volné), \texttt{oflag} je
OR-kombinace pøíznakù 
    \begin{itemize}
    \item \texttt{O\_RDONLY}/\texttt{O\_WRONLY}/\texttt{O\_RDWR} \dots{}
    otevøít pouze pro ètení / pouze pro zápis / pro ètení i zápis 
    \item \texttt{O\_APPEND} \dots{} pøipojování na konec 
    \item \texttt{O\_CREAT} \dots{} vytvoøit, kdy¾ neexistuje 
    \item \texttt{O\_EXCL} \dots{} chyba, kdy¾ existuje (pou¾ití s
    \texttt{O\_CREATE})
    \item \texttt{O\_TRUNC} \dots{} zru¹it pøedchozí obsah (právo zápisu
    nutné)
    \item \dots{}
    \end{itemize}
\item pøi \texttt{O\_CREAT} definuje tøetí parametr \texttt{mode}
pøístupová práva
\end{itemize}
\end{slide}

\label{OPEN}

\begin{itemize}
\item pøi pou¾ití \texttt{O\_CREAT} se \texttt{mode} je¹tì modifikuje podle
nastavení aktuální masky, které se mìní voláním \texttt{umask}. Defaultní
hodnota je typicky \texttt{022}. Doporuèuji se zamyslet, zda ji ve va¹em shell
profile skriptu nenastavit na \texttt{077}. To ale nikdy nedìlejte pro roota,
jinak skonèíte s podivnì se chovajícím systémem -- nainstalovaný software nebude
moct spustit pod bì¾ným u¾ivatelem, to co døíve fungovalo fungovat pøestane
apod.
\item \texttt{mode} nemá defaultní hodnotu, tj. vezme se to, co je na zásobníku
i kdy¾ tento parametr není pøítomen! Pøíznaky i mód jsou ulo¾eny v systémové
tabulce otevøených souborù.
\item pokud se znovu pou¾ije døíve vyu¾ívaná polo¾ka v tabulce deskriptorù nebo
v tabulce otevøených souborù, v¹e potøebné se vynuluje (pozice v souboru, flagy
deskriptoru, \dots)
\item existují je¹tì dal¹í nastavitelné pøíznaky:
\begin{itemize}
\item \texttt{O\_SYNC} (\texttt{O\_DSYNC}, \texttt{O\_RSYNC} -- není
na BSD) \dots{} operace se souborem skonèí a¾ po fyzickém ulo¾ení
dat (synchronized I/O)
\item \texttt{O\_NOCTTY} \dots{} pøi otvírání terminálu procesem,
který nemá øídicí terminál, se tento terminál nestane øídícím
terminálem procesu
\item \label{O_NONBLOCK} \texttt{O\_NONBLOCK} \dots{} pokud nelze ètení nebo
zápis provést okam¾itì, volání \texttt{read}/\texttt{write} skonèí s chybou
místo zablokování procesu
\end{itemize}
\item v pøístupových právech se vynulují ty bity, které jsou
nastavené pomocí \texttt{umask}.
\item pro ètení a zápis nelze pou¾ít \texttt{O\_RDONLY | O\_WRONLY}, proto¾e
implementace pou¾ily 0 pro read-only flag. Norma proto definuje, ¾e aplikace
musí pou¾ít právì jeden z tìchto tøí flagù.
\item je mo¾né otevøít a zároveò vytvoøit soubor pro zápis tak, ¾e jeho mód
zápis nedovoluje. Pøi pøí¹tím otevøení souboru se ale ji¾ tento mód uplatní
pøi kontrole pøístupu a pro zápis jej otevøít nepùjde. Pro \texttt{O\_TRUNC}
také platí, ¾e musíte mít pro daný soubor právo zápisu.
\end{itemize}

%%%%%

\pdfbookmark[1]{creat}{creat}

\begin{slide}
\sltitle{Vytvoøení souboru}
\texttt{int \funnm{creat}(const char *\emph{path}, mode\_t \emph{mode});}
\begin{itemize}
\item \texttt{open()} s pøíznakem \texttt{O\_CREAT} vytvoøí soubor, pokud
je¹tì neexistuje. V zadané hodnotì pøístupových práv se vynulují bity, které
byly nastaveny pomocí funkce\\
\texttt{mode\_t \funnm{umask}(mode\_t \emph{cmask});} 
\item funkce je ekvivalentní volání\\
\texttt{open(path, O\_WRONLY|O\_CREAT|O\_TRUNC, mode);}
\end{itemize}
\texttt{int \funnm{mknod}(const char *\emph{path}, mode\_t \emph{mode},
dev\_t \emph{dev});}
\begin{itemize}
\item vytvoøí speciální soubor zaøízení. 
\end{itemize}
\texttt{int \funnm{mkfifo}(const char *\emph{path}, mode\_t \emph{mode});} 
\begin{itemize}
\item vytvoøí pojmenovanou rouru.
\end{itemize}
\end{slide}

\label{MKFIFO}
\label{CREAT}

\begin{itemize}
\item Volání vrací nejni¾¹í deskriptor, který v dané chvíli nebyl otevøený pro
proces
\item \texttt{open} doká¾e otevøít regulární soubor, zaøízení i pojmenovanou
rouru, ale vytvoøit doká¾e jen regulární soubor; pro ostatní typy souborù je
nutné pou¾ít zde uvedená speciální volání.
\item Test pomocí pøíznaku \texttt{O\_EXCL} na to, zda soubor existuje, a jeho
pøípadné vytvoøení je atomická operace. Toho se vyu¾ívá pøi pou¾ívání lock
souborù. Ze slajdu je vidìt, ¾e tento test je mo¾né provést jen pomocí volání
\texttt{open}, ne \texttt{creat}.
\item Speciální soubory mù¾e vytváøet pouze root, proto¾e se pomocí nich
definují pøístupová práva k periferním zaøízením.
\item Povolené hodnoty pro \texttt{mode} je mo¾né nalézt vìt¹inou v manuálové
stránkce pro \texttt{chmod(2)}, a urèitì je naleznete i v hlavièkovém souboru
\texttt{stat.h}, kde musí být podle normy definované.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item pøíklad v \texttt{src/open\_O\_CREAT} (XXX pøíklad neexistuje, asi
nutno napsat znovu), který ukazuje, ¾e pod Linuxem a
Solarisem se vytvoøí soubor s rùznými právy pokud nepou¾iju tøetí parametr.
\item u \texttt{mknod} je v parametru \texttt{mode\_t} i typ souboru,
\texttt{dev\_t} je konfiguraènì závislé a pou¾ije se pouze kdy¾ vytváøím
znakové nebo blokové zaøízení. devt je mo¾né vytvoøit tøeba na Solarisu funkcí
\texttt{makedev}
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{read, write}{readwrite}

\begin{slide}
\sltitle{Ètení a zápis souborù: \texttt{read()}, \texttt{write()}}

\texttt{ssize\_t \funnm{read}(int \emph{fildes}, void *\emph{buf},
size\_t \emph{nbyte});}
\begin{itemize}
\item z otevøeného souboru s èíslem deskriptoru \texttt{fildes}
pøeète od aktuální pozice max. \texttt{nbyte} bajtù dat a ulo¾í je
od adresy \texttt{buf}. 
\item vrací poèet skuteènì pøeètených bajtù (\texttt{<= nbyte}), 0
znamená konec souboru.
\end{itemize}

\texttt{ssize\_t \funnm{write}(int \emph{fildes}, const void *\emph{buf},
size\_t \emph{nbyte});}
\begin{itemize}
\item do otevøeného souboru s èíslem deskriptoru \texttt{fildes} zapí¹e na
aktuální pozici max. \texttt{nbyte} bajtù dat ulo¾ených od adresy
\texttt{buf}. 
\item vrací velikost skuteènì zapsaných dat (\texttt{<= nbyte}). 
\end{itemize}     
\end{slide}

\begin{itemize}
\setlength{\itemsep}{0.8\itemsep}
\item pro UNIX je ka¾dý soubor posloupnost bajtù bez dal¹í vnitøní struktury.
\item \emsl{chování \texttt{read} a \texttt{write} závisí na typu souboru}
(regulární, zaøízení, roura, soket) a na tom, zda je soubor v blokujícím nebo
neblokujícím módu (flag \texttt{O\_NONBLOCK} pøi otevøení souboru, viz strana
\pageref{O_NONBLOCK}).
\item pro obì volání existuje nìkolik zásadních rohových pøípadù a následující
informace jsou výòatkem z manuálových stránek. Pokud si nejste jisti, doporuèuji
se podívat pøímo do normy (POSIX 1003.1, sekce XSH, èást System Interfaces).
\item volání \texttt{read} vrátí nenulový poèet bajtù men¹í ne¾ \texttt{nbyte},
pokud v souboru zbývá ménì ne¾ \texttt{nbyte} bajtù, nebo volání bylo pøeru¹eno
signálem, nebo soubor je roura, zaøízení èi soket a aktuálnì je k~dispozici ménì
ne¾ \texttt{nbyte} bajtù. Pøi neexistenci dat se blokující \texttt{read}
zablokuje, dokud se nìjaká data neobjeví, neblokující \texttt{read} vrátí
\texttt{-1} a nastaví \texttt{errno} na \texttt{EAGAIN}.
\item volání \texttt{write} vrátí nenulový poèet bajtù men¹í ne¾ \texttt{nbyte},
jestli¾e se do souboru nevejde víc dat (napø. zaplnìný disk), zápis je pøeru¹en
signálem nebo je nastaveno \verb#O_NONBLOCK# a do roury, soketu nebo zaøízení se
vejde pouze èást zapisovaných dat. Bez \verb#O_NONBLOCK# se èeká, dokud se
nepodaøí zapsat v¹e. Pokud nelze aktuálnì zapsat nic, blokující \texttt{write}
se zablokuje, dokud není mo¾né zapisovat, neblokující \texttt{write} vrátí
\texttt{-1} a nastaví \verb#errno# na \verb#EAGAIN#.
\item \emsl{dùle¾ité výjimky vzhledem k rourám} jsou uvedeny na stranì
\pageref{NAMEDPIPE}.
\item kdy¾ \texttt{read} nebo \texttt{write} vrátí ménì ne¾ \texttt{nbyte} z
dùvodu chyby, opakované volání té¾e funkce vrátí \texttt{-1} a nastaví kód chyby
v \texttt{errno}.
\item pøeru¹ení \texttt{read}, \texttt{write} signálem døív, ne¾ se podaøí
pøeèíst, resp. zapsat aspoò jeden bajt, zpùsobí návrat s hodnotou \texttt{-1} a
nastavení \verb#errno# na \verb#EINTR#. Pozor na to, ¾e zde je rozdíl proti
situaci, kdy pøed doruèením signálu podaøí pøeèíst nebo zapsat alespoò jeden
bajt (viz vý¹e).
\item pøíznak otevøení souboru \verb#O_APPEND# zajistí atomický zápis na konec
souboru (pouze na lokálním disku), tj. \emsl{ka¾dý} zápis se provede na konec
souboru (tzv. \emph{append-only} soubor).
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item pøíklad na èteni/zapis z FIFO. read\_fifo/write\_fifo na sebe
pockaji a predaji si dany bajt. Kdyz pouziju read\_fifo2 ktere se
neblokuje, tak read vrati -1. Pokud navic write ceka (jakykoli
parameter), tak vrati broken pipe, jinak stihne zapsat.
XXX tady neni jasne k cemu se ten komentar vztahuje. co je read\_fifo/write\_fifo ?
\item muzes neco rict i o O\_NODELAY
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{close}{close}

\begin{slide}
\sltitle{Uzavøení souboru: \texttt{close()}}
\texttt{int \funnm{close}(int \emph{fildes});} 
\begin{itemize}
\item uvolní deskriptor \texttt{fildes}, pokud to byl poslední deskriptor, který
odkazoval na otevøení souboru, zavøe soubor a uvolní záznam o otevøení souboru. 
\item kdy¾ je poèet odkazù na soubor 0, jádro uvolní data souboru. Tedy i po
zru¹ení v¹ech odkazù (jmen) mohou se souborem pracovat procesy, které ho mají
otevøený. Soubor se sma¾e, a¾ kdy¾ ho zavøe poslední proces. 
\item kdy¾ se zavøe poslední deskriptor roury, v¹echna zbývající data v~rouøe se
zru¹í. 
\item pøi skonèení procesu se automaticky provede \texttt{close()} na v¹echny
deskriptory.
\end{itemize}
\end{slide}

\begin{itemize}
\item Pokud proces potøebuje doèasný soubor, mù¾e ho vytvoøit, ihned smazat a
pak s ním pracovat pøes existující deskriptor (tento deskriptor lze pøedat
synovským procesùm). Kdy¾ je takový soubor zavøen v¹emi procesy, jádro sma¾e
jeho data z disku.
\item I operace \texttt{close} mù¾e selhat. Napø. nìkteré filesystémy zapisují
data na disk a¾ v okam¾iku zavøení souboru, kdy¾ zápis skonèí chybou,
\texttt{close} vrátí \texttt{-1}.
\item Otevírání souborù a nezavírání je pøi ukonèení práce s nimi vede k
alokované pamìti, kterou ji¾ nemáme jak uvolnit (ztratili jsme na ni odkaz) --
situace kde takto pamì» ``ztrácíme'' se nazývá \emph{memory leak}. Není to úplnì
pøesnì to, jak se typicky chápe memory leak (pamìt, na kterou jsme ztratili
ukazatel), ale následky jsou podobné.
\item \label{SIMPLE_CAT} Pøíklad na jednoduchý \texttt{cat(1)} program:
\priklad{read/cat.c}
\end{itemize}

%%%%%

\begin{slide}
\sltitle{Pøíklad: kopírování souborù}
\begin{alltt}
{\footnotesize
#include <sys/types.h>
#include <fcntl.h>
int main(int argc, char *argv[])
\{
    char buf[4096];
    int inf, outf;
    ssize\_t ilen;

    inf = \emprg{open}(argv[1], O\_RDONLY);
    outf = \emprg{creat}(argv[2], 0666);
    while ((\emblue{ilen} = \emprg{read}(inf, buf, 4096)) > 0)
            \emprg{write}(outf, buf, \emblue{ilen});

    \emprg{close}(inf); \emprg{close}(outf);
    return (0);
\}
}
\end{alltt}
\end{slide}

\begin{itemize}
\item Tento pøíklad je kompletní! Staèí provést cut-and-paste, pøelo¾it a
spustit. Nutno poznamenat, ¾e pro úèely pou¾ití pouze jednoho slajdu se
netestují ¾ádné chyby, vèetnì ignorování toho, ¾e u¾ivatel mù¾e program spustit
bez parametrù, co¾ zpùsobí pokus o pøístup do pamìti na místo, které neobsahuje
oèekávaná data. To pak na nìkterých systémech mù¾e zpùsobit core dump.
\item Je neefektivní èíst a zapisovat soubor po jednotlivých bajtech, proto¾e
ka¾dé systémové volání má jistý overhead, nezávislý na velikosti zpracovávaného
bloku. Lep¹í je proto najednou zpracovávat rozumnì velké bloky, napøíklad
8-64KB. Pøechozí pøíklad \priklad{read/cat.c} má pøepínaè \texttt{-b} pro
nastavení velikosti bloku pro ètení; zkuste s (a bez) \texttt{-b 1} a zmìøte
pomocí \texttt{time(1)}. Uvidíte velký rozdíl.
\item Pokud potøebujete pracovat s malými èástmi/buffery, je lep¹í pou¾ít stream
orintované knihovní funkce \texttt{fopen}, \texttt{fread}, \dots které data
vnitønì bufferují.
\item V¹imnìte si, ¾e v¾dy zapisujeme jen tolik bajtù, kolik jsme jich naèetli.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item proè je pou¾ití \texttt{fcntl.h} nezbytné pro pøeklad? I tak pøekladaè
pí¹e varování, ale program se vytvoøí, bez daného souboru pøekladaè program
nevytvoøí.
\end{itemize}
]]])

%%%%%
\begin{slide}
\sltitle{Práce s pojmenovanou rourou}

\begin{itemize}
\item nemusí být mo¾né vytvoøit FIFO na sí»ovém filesystému (NFS, AFS)
\item je nutné znát sémantiku otevírání pojmenované roury:
  \begin{itemize}
  \item otevøení roury pouze pro ètení se zablokuje do té doby, dokud se
  neobjeví zapisovatel (pokud ji¾ neexistuje)
  \item otevøení roury pouze pro zápis se zablokuje do té doby, dokud se
  neobjeví ètenáø (pokud ji¾ neexistuje)
  \item toto chování je mo¾né ovlivnit flagem \texttt{O\_NONBLOCK}
  \end{itemize}
\item sémantika ètení a zápisu je je¹tì o nìco slo¾itìj¹í, vìnujte velkou
pozornost poznámkám pod tímto slajdem
  \begin{itemize}
  \item a je to stejné jako u nepojmenované roury
  \end{itemize}
\end{itemize}
\end{slide}

\label{NAMEDPIPE}

\begin{itemize}
\item Co se týèe vytvoøení pojmenované roury, mluvíme zde o volání
\texttt{mkfifo} ze strany \pageref{MKFIFO}. Pou¾ití nepojmenované roury je
popsané na stranì \pageref{PIPE}.
\item Ètenáø je proces, který otevøe soubor (i) pro ètení, zapisovatel je
proces, který otevøe soubor (i) pro zápis.
\item Je mo¾né otevøít rouru pro zápis i ètení stejným procesem najednou, ani¾
by pøedtím existoval ètenáø nebo zapisovatel. Proces pak mù¾e do roury zapisovat
a z opaèného konce èíst, co do roury napsal.
\item Pokud rouru nemá ¾ádný proces otevøenou pro zápis, pro okam¾ité vrácení
deskriptoru pouze pro ètení je nutné \emsl{otevøít} rouru s flagem
\texttt{O\_NONBLOCK}, proces se jinak na rouøe zablokuje èekáním na
zapisovatele. Pozor ale na to, ¾e pokus o \emsl{ètení} z roury bez zapisovatele
okam¾itì vrátí 0 jako indikaci konce souboru; \emsl{proces se nezablokuje
èekáním na zapisovatele}, bez ohledu na to zda byl soubor otevøen v blokovacím
èi neblokovacím módu. Pøi \emsl{zápisu} do roury bez ètenáøe (tj. zapisovatel
otevøel rouru je¹tì v dobì, kdy ètenáø existoval, viz následující odstavec)
po¹le kernel procesu signál \texttt{SIGPIPE} (``broken pipe''):

\begin{verbatim}
bash$ dd if=/dev/zero | date
Sun Mar  2 01:03:38 CET 2008
bash$ echo ${PIPESTATUS[0]}
141
bash$ kill -l 141
PIPE
\end{verbatim}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item \texttt{kill -l [exit\_status]} je souèástí POSIXu (XCU), v podstatì pouze
provede \texttt{exit\_status - 128} a zjistí podle toho èísla jméno
signálu (pro pøípad vý¹e SIGPIPE = 13).
\end{itemize}
]]])

\item v pøípadì otevírání pouze pro zápis s \texttt{O\_NONBLOCK} bez
existujícího ètenáøe se vrátí chyba a \texttt{errno} se nastaví na
\texttt{ENXIO}. Tato asymetrie je snahou, aby v rouøe nebyla data, která nebudou
v krátké dobì pøeètena -- systém nemá zpùsob, jak uschovávat data v rouøe bez
èasového omezení. Bez \texttt{O\_NONBLOCK} flagu se proces zablokuje èekáním na
ètenáøe. Asymetrií je mínìno to, ¾e systému nevadí ètenáøi bez zapisovatelù, ale
nechce mít zapisovatele bez ètenáøù. I tato situace se mù¾e stát, viz pøedchozí
odstavec, ale tam to jinak øe¹it nelze.
\item z uvedeného tedy vyplývá, ¾e pokud chcete vytvoøit proces, který èeká na
pojmenované rouøe a vykonává po¾adavky od rùzných procesù-zapisovatelù
(od ka¾dého jeden), musíte ji otevøít s flagem
\texttt{O\_RDWR} i kdy¾ do roury nehodláte zapisovat; jinak po prvním
zablokování v \texttt{open} pøi èekání na otevøení roury zapisovatelem by
dal¹í volání \texttt{read} pro akceptování dal¹ího po¾adavku typicky vrátilo
0, pokud by náhodou roura nebyla mezitím pro zápis otevøena dal¹ím procesem.

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item XXX overit prikladem !
\end{itemize}
]]])

\item zápis maximální velikosti \texttt{PIPE\_BUF} (\texttt{limits.h}) je
zaruèený jako atomický, tj. data nesmí být prolo¾ena daty jiných zapisujících
procesù. Napø. v Solarisu 11 to je to 5120 bajtù, ve FreeBSD 5.4 je to 512
bajtù. Pokud zapisujete více, mù¾e se to stát. Zároveò platí, ¾e pokud se
zapisuje ménì ne¾ \texttt{PIPE\_BUF} bajtù, zapí¹ou se v¾dy najednou, a pokud je
nastaveno \texttt{O\_NONBLOCK} a nelze toho dosáhnout, vrátí se chyba.
\item roura nemá pozici v souboru, zápis tak v¾dy pøidává na konec.
\item stejnì se vzhledem ke ètení a zápisu chová i nepojmenovaná roura, viz
strana \pageref{PIPE}.

%%%\item pro zápis platí toto (pøevzato z [Rochkind]):
%%%
%%%\renewcommand{\arraystretch}{1.3}
%%%
%%%\begin{tabularx}{1.0\textwidth}{|l|l|l|l|l|}
%%%\hline
%%%\texttt{O\_NONBLOCK} ? & bajtù k zápisu & nic nelze zapsat & èásteèný zápis
%%%mo¾ný & kompletní zápis mo¾ný \\
%%%\hline
%%%není & \texttt{<= PIPE\_BUF} & zablokuje se; kompletní zápis; atomické &
%%%zablokuje se; kompletní zápis; atomické & nezablokuje se; kompletní zápis;
%%%atomické \\
%%%\hline
%%%není & \texttt{> PIPE\_BUF} & zablokuje se; kompletní zápis; není atomické &
%%%zablokuje se; kompletní zápis; není atomické & mù¾e se zablokovat; kompletní
%%%zápis; není atomické \\
%%%\hline
%%%nastaven & \texttt{<= PIPE\_BUF} & \texttt{EAGAIN} & \texttt{EAGAIN} &
%%%nezablokuje se; kompletní zápis; atomické \\
%%%\hline
%%%nastaven & \texttt{> PIPE\_BUF} & \texttt{EAGAIN} & nezablokuje se; èásteèný
%%%zápis nebo \texttt{EAGAIN}; není atomické & nezablokuje se; kompletní,
%%%èásteèný zápis nebo \texttt{EAGAIN}; není atomické \\
%%%\hline
%%%\end{tabularx}
\end{itemize}

%%%%%

\pdfbookmark[1]{lseek}{lseek}

\begin{slide}
\sltitle{Nastavení pozice: \texttt{lseek()}}
\texttt{off\_t \funnm{lseek}(int \emph{fildes}, off\_t \emph{offset},
int \emph{whence});}
\begin{itemize}
\item nastaví pozici pro ètení a zápis v otevøeném souboru daném èíslem
deskriptoru \texttt{fildes} na hodnotu \texttt{offset}. 
\item podle hodnoty \texttt{whence} se \texttt{offset} poèítá: 
    \begin{itemize}
    \item \texttt{SEEK\_SET} \dots{} od zaèátku souboru
    \item \texttt{SEEK\_CUR} \dots{} od aktuální pozice 
    \item \texttt{SEEK\_END} \dots{} od konce souboru 
    \end{itemize}
\item vrací výslednou pozici poèítanou od zaèátku souboru. 
\item \texttt{lseek(fildes, 0, SEEK\_CUR)} pouze vrátí aktuální pozici. 
\end{itemize}
\end{slide}

\begin{itemize}
\item \label{LSEEK} Poèítá se od 0, tj. offset 0 je první bajt souboru. Tam, kde
to má smysl, je mo¾né pro \texttt{offset} pou¾ít i záporné èíslo. Pøíklad:
\priklad{read/lseek.c}.

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item pro demonstraci pøíkladu \priklad{read/lseek.c} vytvoøit soubor
takto: \texttt{echo "ABCDEF" > file} a pak se zeptat co se stane kdy¾ se
spustí zkompilovaný pøíklad jako \texttt{./a.out 0 6}. Ano, je tam
newline, pozice jsou toti¾ od nuly (na 0 je 'A').
\end{itemize}
]]])

\item Lze se pøesunout i na pozici za koncem souboru. Pokud se pak
provede zápis, soubor se prodlou¾í a v pøeskoèené èásti budou samé
nuly (samotné \texttt{lseek} nestaèí). Nìkteré filesystémy takové
bloky celých nul pro úsporu místa neukládají.
\item Velikost souboru je mo¾né zjistit pomocí \texttt{lseek(fildes,
0, SEEK\_END)}.
\item Nejèastìj¹í operace s \texttt{lseek} jsou \emsl{tøi}: nastavení
konkrétní pozice od zaèátku souboru, nastavení pozice na konec
souboru a zji¹tìní aktuální pozice v souboru (0 spoleènì se
\texttt{SEEK\_CUR})
\item Pøi pou¾ití \texttt{lseek} se ¾ádné I/O neprovede, tj. ¾ádný pøíkaz
se nepo¹le na øadiè disku.
\item \texttt{lseek} nemusí slou¾it jen pro operace \texttt{read} a
\texttt{write}, ale také pro následnou operaci \texttt{lseek}
\item \label{BIG_FILE} Seekování a zápis mù¾e vést k problémùm se zálohami.
Pøíklad: \priklad{read/big-file.c} demonstruje, ¾e pøesun souboru s
"dírami" (tzv. sparse file) mù¾e vést k nárùstu velikosti souboru
co se týèe blokù alokovaných file systémem.
Chování zále¾í na kombinaci operaèního systému, archivního programu a
file systému (a jejich verzí). Nìkteré programy mají pøepínaèe, které
umo¾ní díry zachovat (napø. \texttt{dd} s \texttt{conv=sparse},
\texttt{tar} s \texttt{-S}, \texttt{rsync} s \texttt{--sparse}, atd.).

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item pøíklad \priklad{read/big-file.c} nefunguje na OS X s HFS+ který
sparse soubory nepodporuje (aèkoliv dle
\url{http://en.wikipedia.org/wiki/Sparse\_file} VFS v OS X podporu má).
V UNIX labu na Malé stranì s Linuxem a AFS to taky nejde. Naproti tomu
na FreeBSD 8.3 s UFS a gzip 20110523 demonstrace funguje.
\end{itemize}
]]])

\item Pozor na pøehození parametrù. Druhá øádka samostatnì vypadá OK, ale má
pøehozené parametry. \texttt{SEEK\_SET} je navíc 0 a \texttt{SEEK\_CUR} je 1,
tak¾e vás to nikam neposune a nic ¹patného se nestane, a o to je hor¹í to pak
najít.
\begin{verbatim}
lseek(fd, 1, SEEK_SET)
lseek(fd, SEEK_SET, 1)
\end{verbatim}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item výsledek operace \texttt{seek} na souborech, které nejsou
schopné této operace schopné, není definován. Jaký druh souborù to
mù¾e být?
\item kde se nepouziji nuly pri seek za konec souboru? Jaky system?
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{truncate}{truncate}

\begin{slide}
\sltitle{Zmìna velikosti: \texttt{truncate()}}
\texttt{int \funnm{truncate}(const char *\emph{path}, off\_t \emph{length});\\
int \funnm{ftruncate}(int \emph{fildes}, off\_t \emph{length});}
\begin{itemize}
\item zmìní délku souboru zadaného cestou nebo èíslem deskriptoru na
po¾adovanou hodnotu. 
\item pøi zkrácení souboru zru¹í nadbyteèná data. 
\item standard ponechává nespecifikované, jestli funguje prodlou¾ení
souboru (s vyplnìním pøidaného úseku nulami). Proto je lep¹í
k~prodlou¾ení souboru pou¾ít:
\begin{verbatim}
char buf = '\0';
lseek(fildes, length - 1, SEEK_SET);
write(fildes, &buf, 1);
\end{verbatim}
\end{itemize}
\end{slide}

\begin{itemize}
\item zru¹it ve¹kerý obsah souboru pøi otevøení se dá pøíznakem
\texttt{O\_TRUNC} ve funkci \texttt{open}.
\item podrobnosti je tøeba hledat v manuálové stránce, napø. ve
FreeBSD v sekci BUGS nalezneme toto: \emph{Use of \texttt{truncate}
to extend a file is not portable.}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item truncate a¾ v BSD 4.2, do té doby bylo nutné vytvoøit nový
prázdný soubor a pøejmenovat ho na ten starý. Flag \texttt{O\_CREAT} je¹tì
nebyl v UNIXv7, System VR3 u¾ ho mìl, 4.2BSD ho taky mìl; SunOS pøed 5.0
ho ale nemìl, byl pøidán a¾ v Solaris 2.0.
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{dup, dup2}{dup}

\begin{slide}
\sltitle{Duplikace deskriptoru: \texttt{dup()}, \texttt{dup2()}}
\texttt{int \funnm{dup}(int \emph{fildes});}
\begin{itemize}
\item duplikuje deskriptor \texttt{fildes} na první volný deskriptor, vrátí
nový deskriptor, který odkazuje na stejné otevøení souboru. 
\item ekvivalent \texttt{fcntl(fildes, F\_DUPFD, 0);}
\end{itemize}
\texttt{int \funnm{dup2}(int \emph{fildes}, int \emph{fildes2});}
\begin{itemize}
\item duplikuje deskriptor \texttt{fildes} do deskriptoru \texttt{fildes2}. 
\item ekvivalent\\
\texttt{close(fildes2);\\ fcntl(fildes, F\_DUPFD, fildes2);}
\end{itemize}
\end{slide}

\begin{itemize}
\item první volný deskriptor se pou¾ije i u otevírání a vytváøení souborù,
viz strany \pageref{OPEN} a \pageref{CREAT}.
\item duplikovaný a pùvodní deskriptor sdílí stejné otevøení souboru a tedy i
ak\-tu\-ál\-ní pozici a mód ètení/zápis.
\item ekvivalent pro \texttt{dup2} není zcela ekvivalentní, napø. pokud je
\texttt{fildes} rovný \texttt{fildes2}, tak se neprovede
\texttt{close(fildes2)} a \texttt{dup2} rovnou vrátí \texttt{fildes2}.
Více viz POSIX 1003.1 (èást XSH, System interfaces).
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item existuje mo¾nost jak zjistit jestli byl daný deskriptor pøesmìrovaný ?
pokud byl napø. stdout/stderr pøesmìrovany do souboru tak by ¹lo pou¾ít
detekci toho jestli je to terminál (pomocí \texttt{isatty}, ale pokud
pøesmìrovávám tøeba stdout na stderr, tak u¾ to nejde. viz pøíklad
\priklad{read/isstdout.c}. Jenom v jádøe se dozvím, k jaké struktuøe
patøí daný deskriptor. V Solaris kernelu je to funkce \texttt{getf(fd)},
která vrací strukturu \texttt{file\_t} (ta má v sobì pointer na vnode).
\item \rednote{nemít pøí¹tí rok u¾ rouru? Tj. pipe. Viz advanced
u{}nix programming, který toto zavádí døíve a mù¾ou tak dát rovnou
zajímavìj¹í pøíklady.}
\end{itemize}
]]])

%%%%%

\begin{slide}
\sltitle{Pøíklad: implementace shellového pøesmìrování}
\begin{itemize}
\item \verb#$ program < in > out 2>> err#
\end{itemize}
\begin{verbatim}
close(0);
open("in", O_RDONLY);
close(1);
open("out", O_WRONLY | O_CREAT | O_TRUNC, 0666);
close(2);
open("err", O_WRONLY | O_CREAT | O_APPEND, 0666);
\end{verbatim}
\begin{itemize}
\item \verb#$ program > out 2>&1#
\end{itemize}
\begin{verbatim}
close(1);
open("out", O_WRONLY | O_CREAT | O_TRUNC, 0666);
close(2);
dup(1);
\end{verbatim}
\end{slide}

\begin{itemize}
\item v¹imnìte si korespondence flagu \texttt{O\_APPEND} s \texttt{>>}
\item \label{REDIRECT} Dal¹í pøíklad pou¾ití \texttt{dup} uvidíme, a¾ se budeme
zabývat rourami. První pøesmìrování (bez \texttt{stderr}) je v
\priklad{read/redirect.c}. Volání \texttt{execl} v tomto pøíkladu nahradí
aktuální obraz bì¾ícího procesu obrazem programu pøe\-da\-ného jako první
argument. Více o volání \texttt{execl} je na stranì \pageref{EXEC}.
\item pro pochopení toho jak funguje pøesmìrování je dobré si nakreslit
tabulku deskriptorù v èase a kam "ukazují". napø. pro druhý pøíklad
(iniciální stav, stav po \texttt{close(1)} \texttt{open("out", ...)},
koneèný stav):
\begin{verbatim}
+-------+               +-------+               +-------+
|   0   +-> stdin       |   0   +-> stdin       |   0   +-> stdin
+-------+               +-------+               +-------+
|   1   +-> stdout ===> |   1   +-> "out"  ===> |   1   +-> "out"
+-------+               +-------+               +-------+    ^
|   2   +-> stderr      |   2   +-> stderr      |   2   +----/ 
+-------+               +-------+               +-------+
\end{verbatim}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item Ukázat pøíklad \priklad{read/redirect.c} tak ¾e soubor \texttt{in}
se vytvoøí pomocí \texttt{cp /etc/passwd in} a následnì se pøíklad spustí
pomocí \texttt{env - truss ./a.out} - jsou na tom hezky vidìt
deskriptory.
\end{itemize}
]]])

\item Je potøeba si dát pozor na stav deskriptorù. Druhý pøíklad nebude
fungovat, kdy¾ bude deskriptor 0 uzavøen, proto¾e \texttt{open} vrátí deskriptor
0 (první volný) a \texttt{dup} vrátí chybu (pokus o duplikaci uzavøeného
deskriptoru). Mo¾né øe¹ení:
\begin{alltt}
close(1);
if((fd = open("out", O\_WRONLY | O\_CREAT | O\_TRUNC, 0666)) == 0)
    dup(0);
close(2);
dup(1);
if(fd == 0)
    close(0);
\end{alltt}
nebo
\begin{alltt}
fd = open("out", O\_WRONLY | O\_CREAT | O\_TRUNC, 0666);
if(fd != 1) \{
    dup2(fd, 1);
    close(fd);
\}
dup2(1, 2);
\end{alltt}
\end{itemize}

%%%%%

\pdfbookmark[1]{fcntl, ioctl}{fcntlioctl}

\begin{slide}
\sltitle{Øídicí funkce souborù a zaøízení: \texttt{fcntl()},
\texttt{ioctl()}} \texttt{int \funnm{fcntl}(int \emph{fildes}, int
\emph{cmd}, ...);}
\begin{itemize}
\item slou¾í pro duplikaci deskriptorù, nastavování zámkù, testování
a nastavování rùzných pøíznakù souboru.

pøíklad: zavøení standardního vstupu pøi spu¹tìní programu (volání
typu exec)\\ \texttt{fcntl(0, F\_SETFD, FD\_CLOEXEC);}
\end{itemize}

\texttt{int \funnm{ioctl}(int \emph{fildes}, int \emph{request}, ... );}
\begin{itemize}
\item rozhraní pro øídicí funkce periferních zaøízení
\item pou¾ívá se jako univerzální rozhraní pro ovládání zaøízení,
ka¾dé zaøízení definuje mno¾inu pøíkazù, kterým rozumí.
\end{itemize}
\end{slide}

\label{FCNTL}

\begin{itemize}
\item jak pozdìji uvidíme, i k socketùm se pøistupuje pøes souborové
deskriptory, a je tedy mo¾né \texttt{fnctl} pou¾ít i na nì, tøeba pro
nastavení neblokujícího socketu. Více informací viz strana \pageref{CONNECT}.
\item mo¾né hodnoty \texttt{cmd} ve funkci \texttt{fcntl}:
\begin{itemize}
\item \texttt{F\_DUPFD} \dots{} duplikace deskriptoru
\item \texttt{F\_GETFD} \dots{} zji¹tìní pøíznakù deskriptoru
(\texttt{FD\_CLOEXEC} -- uzavøení pøi exec). \texttt{FD\_CLOEXEC} je jediný flag
pro deskriptory, definovaný v normì UNIX~03.
\item \texttt{F\_SETFD} \dots{} nastavení pøíznakù deskriptoru
\item \texttt{F\_GETFL} \dots{} zji¹tìní módu ètení/zápis a pøíznakù otevøení
souboru (jako u \texttt{open})
\item \texttt{F\_SETFL} \dots{} nastavení pøíznakù otevøení souboru
(\texttt{O\_APPEND}, \texttt{O\_DSYNC}, \texttt{O\_NONBLOCK}, \texttt{O\_RSYNC},
\texttt{O\_SYNC}). Nemohu nastavit pøíznaky pro RO/RW a ani pøíznaky pro
vytvoøení, zkrácení nebo exkluzivní pøístup k souboru.
\item \texttt{F\_GETLK}, \texttt{F\_SETLK}, \texttt{F\_SETLKW} \dots{}
nastavování zámkù
\end{itemize}
\item je dùle¾ité si uvìdomit, ¾e jsou dva druhy pøíznakù -- pøíznak(y) pro
souborový deskriptor a pøíznaky pro jedno konkrétní otevøení souboru -- tj.
pøíznaky jsou ulo¾ené ve dvou rùzných tabulkách.

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item TODO - udìlat k tomu pøíklad: dva deskriptory ukazující na stejný
soubor mající rùzné pøíznaky.
\end{itemize}
]]])

\item periferní zaøízení podporují ètení a zápis dat pomocí \texttt{read},
\texttt{write} a mapování dat do pamìti (\texttt{mmap}), ve¹keré dal¹í
operace se zaøízením (napø. nastavení parametrù, zamèení nebo eject) se dìlají
funkcí \texttt{ioctl}.
\item pøi nastavování pøíznakù nejdøív v¾dy zjistìte, jaké byly pøedtím. I kdy¾
jste si jisti, ¾e v dané chvíli jsou nulové a je tedy mo¾né provést
\texttt{fcntl(fd, O\_APPEND)}, nemù¾ete vìdìt, co se mù¾e zmìnit (napøíklad o
pár øádkù vý¹e nìjaký flag pøidáte, ani¾ byste vìdìli, ¾e jste ovlivnìni kódem
dole). Tedy v¾dy pou¾ijte napøíklad toto:

\begin{verbatim}
flags = fcntl(fd, F_GETFL);
if (fcntl(fd, F_SETFL, flags | O_APPEND) == -1)
  ...
\end{verbatim}

\dots a podobnì pro odebrání flagu -- je ¹patné øe¹ení nastavit
hodnotù flagù na nulu, místo toho je tøeba pou¾ít bitového
jednièkového doplòku pøíslu¹ného flagu (\texttt{flags \& \tilda{}O\_APPEND}).
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item \rednote{mozna uz mej jednoduse definovany exec, daji se s
tim ukazat zajimavejsi priklady} - rozhodnì nutné pro pøíklad
read/redirect.c.
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{stat, fstat}{stat}

\begin{slide}
\sltitle{Informace o souboru: \texttt{stat()}}
\setlength{\baselineskip}{0.9\baselineskip}
\texttt{int \funnm{stat}(const char *\emph{path}, struct stat *\emph{buf});\\
int \funnm{fstat}(int \emph{fildes}, struct stat *\emph{buf});}
\begin{itemize}
\item pro soubor zadaný cestou, resp. èíslem deskriptoru, vrátí strukturu
obsahující informace o souboru, napø.: 
\begin{itemize}
\item \texttt{st\_ino} \dots{} èíslo i-uzlu 
\item \texttt{st\_dev} \dots{} èíslo zaøízení obsahujícího soubor
\item \texttt{st\_uid}, \texttt{st\_gid} \dots{} vlastník a skupina souboru
\item \texttt{st\_mode} \dots{} typ souboru a jeho pøístupová práva
\item \texttt{st\_size}, \texttt{st\_blksize}, \texttt{st\_blocks}
\dots{} velikost souboru v~bajtech, preferovaná velikost bloku pro I/O a poèet
blokù 
\item \texttt{st\_atime}, \texttt{st\_mtime}, \texttt{st\_ctime}
\dots{} èasy posledního pøístupu, modifikace souboru a modifikace i-uzlu
\item \texttt{st\_nlink} \dots{} poèet odkazù na soubor
\end{itemize}
\end{itemize}
\end{slide}

\begin{itemize}
\item update èasu posledního pøístupu k souboru lze na bì¾ných file
systémech vypnout pomocí optionu \texttt{noatime} pøíkazu \texttt{mount}.
Hodit se to mù¾e pro urychlení, pokud se provádí ètení velkého mno¾ství
souborù a nezále¾í na èasu pøístupu na tìchto souborech (napø. pøi
kompilaci).
\item \emph{Metadata} jsou informace o souboru -- tedy mód, èasy pøístupu,
délka, vlastník a skupina atd. Nepatøí mezi nì skuteèná data souboru, a ani
jméno, které není ulo¾eno v rámci daného souboru, ale v adresáøi èi v
adresáøích.
\item Metadata je mo¾né pøeèíst, i kdy¾ proces nemá práva pro ètení obsahu
souboru.
\item Touto funkcí nezískám flagy deskriptoru ani flagy z pole tabulky
otevøených souborù v systému, zde jde o informace ohlednì souboru ulo¾eného na
pa\-mì\-»o\-vém médiu.
\item Co se stane kdy¾ se zavolá \texttt{fstat} na deskriptory 0,1,2 ?
(pøedpokládáme ¾e nejsou pøesmìrované z normálního stavu)

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item Struktura \texttt{stat} v sobì bude mít polo¾ky vyplnìné podle
atributù \texttt{/dev/stdin}, \texttt{/dev/stdout},
\texttt{/dev/stderr}. Na Linuxu ukazují na pseudo-terminal, napø. v SSH
session je to: \texttt{/dev/stdin} $\rightarrow$\texttt{/dev/fd/0}
$\rightarrow$ \texttt{/dev/pts/1}.
\end{itemize}
]]])

\item \texttt{st\_ctime} není èas vytvoøení souboru (creation time), ale èas
zmìny indexového uzlu (change time)
\item Norma nespecifikuje poøadí polo¾ek ve struktuøe ani nezakazuje pøidat
dal¹í.
\item \label{STAT} Pøíklad: \priklad{stat/stat.c}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item st\_blocks muze byt mensi proti delce souboru kvuli nulovym
blokum
\item st\_dev plus st\_ino je jednoznacna identifikace souboru v
systemu. Jak se vytvari dev neni ve specifikaci, typicky to je
nejaka kombinace major a minor cisla.
\item st\_atime se zmeni pro adresar pri ls, ale nezmeni se, kdyz je
pouze soucast cesty (tedy ne konec cesty)
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{lstat}{lstat}

\begin{slide}
\sltitle{Informace o souboru (2)}
\begin{itemize}
\item pro typ souboru jsou v \texttt{<sys/stat.h>} definovány
konstanty \verb#S_IFMT# (maska pro typ), \verb#S_IFBLK# (blokový
speciální), \verb#S_IFCHR# (znakový speciální), \verb#S_IFIFO#
(FIFO), \verb#S_IFREG# (obyèejný), \verb#S_IFDIR# (adresáø),
\verb#S_IFLNK# (symlink). 
\item typ lze testovat pomocí maker \verb#S_ISBLK(m)#,
\verb#S_ISCHR(m)#, \verb#S_ISFIFO(m)#, \verb#S_ISREG(m)#,
\verb#S_ISDIR(m)#, \verb#S_ISLNK(m)#. 
\item konstanty pro pøístupová práva: \verb#S_IRUSR# (ètení pro
vlastníka), \verb#S_IWGRP# (zápis pro skupinu), atd. 
\end{itemize}
\texttt{int \funnm{lstat}(const char *\emph{path}, struct stat
*\emph{buf});}
\begin{itemize}
\item kdy¾ je zkoumaný soubor symlink, \texttt{stat()} vrátí
informace o souboru, na který ukazuje. Tato funkce vrací informace o
symlinku.
\end{itemize}
\end{slide}

\begin{itemize}
\item typ a práva souboru jsou ulo¾ena spoleènì v \verb#st_mode#,
proto existují zmi\-òo\-va\-ná makra.
\item S\_IFMT specifikuje tu èást bitù, které jsou vìnované typu
souboru, makra pro jednotlivé typy pak nejsou masky, ale hodnoty,
tak¾e test na typ souboru je nutné udìlat takto:
\texttt{(st\_mode~\&~S\_IFMT~==~S\_IFREG)}. V¹echna makra jsou v
normì, tak¾e jejich pou¾íváním zaruèíme pøenositelný kód.
\item Pøíklad: \priklad{stat/filetype.c}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item lstat nema prislusny lfstat, protoze nelze mit fd na
symlink. A i kdyby k tomu doslo, tak by stejne stacil fstat, protoze
uz bychom ten deskriptor meli\dots
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{utime}{utime}

\begin{slide}
\sltitle{Nastavení èasù souboru}
\texttt{int \funnm{utime}(const char *\emph{path},
const struct utimbuf *\emph{times});}
\begin{itemize}
\item nastaví èas poslední modifikace souboru a èas posledního
pøístupu k~souboru.
\item nelze zmìnit èas poslední modifikace i-uzlu.
\item volající proces musí mít právo zápisu pro soubor.
\end{itemize}
\end{slide}

\begin{itemize}
\item Tuto funkci pou¾ívají hlavnì kopírovací a archivaèní programy,
aby zajistily stejné èasy kopie a originálu (napø. \texttt{tar} nebo
\texttt{rsync}). 
\item Shellové rozhraní pro funkci \texttt{utime} pøedstavuje pøíkaz
\texttt{touch}. Mìnit takto èas modifikace i-uzlu ale nelze.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item poznamka o tom, jak Venca nastavoval cas u svyho zapoctaku
\item priklad na c\_time -- na FreeBSD pouzit 'stat -x file' a pak
pouzit 'touch -m/-a' a ukazat, ze c\_time se meni vzdy
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{access}{access}

\begin{slide}
\sltitle{Test pøístupových práv: \texttt{access()}}
\texttt{int \funnm{access}(const char *\emph{path}, int \emph{amode});}
\begin{itemize}
\item otestuje, zda volající proces má k souboru \texttt{path} práva
daná OR-kombinací konstant v \texttt{amode}: 
    \begin{itemize}
    \item \verb#R_OK# \dots{} test práva na ètení 
    \item \verb#W_OK# \dots{} test práva na zápis 
    \item \verb#X_OK# \dots{} test práva na spu¹tìní 
    \item \verb#F_OK# \dots{} test existence souboru
    \end{itemize}
\item na rozdíl od \texttt{stat()}, výsledek závisí na RUID a RGID
procesu
\item toto volání se nedá pou¾ít bezpeènì, proto ho nikdy nepou¾ívejte
procesu
\end{itemize}
\end{slide}

\begin{itemize}
\item Volání \texttt{access} aplikuje mechanismus testování pøístupových práv k
zadanému souboru pro volající proces a vrátí výsledek.
\item Funkce \texttt{access} volání byla pro setuid proces, aby si mohl ovìøit,
zda u¾ivatel bì¾ící daný setuid proces by mìl za normálních okolností k
pøíslu¹nému souboru pøístup. Z toho vyplývá, ¾e toto volání je \emsl{security
hole} -- mezi testem a následnou akcí se soubor mù¾e zmìnit tøeba tak, ¾e
pùvodní (mùj) soubor sma¾u a vytvoøím symbolický link se stejným jménem na
soubor, ke kterému bych jinak nemìl pøístup. Toto proces nemù¾e nikdy o¹etøit,
tak¾e vesele zmodifikuje soubor, který bych jako u¾ivatel nikdy nemohl zmìnit.
Správným øe¹ením je vrátit se zpátky k reálným UID/GID a pøístup rovnou
vyzkou¹et. Pokud napøíklad daný soubor otevøeme, u¾ nám ho nikdo pod rukama
``nevymìní''.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item v Sunu je toto volani na blacklistu
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{chmod, chown}{chmodchown}

\begin{slide}
\sltitle{Nastavení pøístupových práv}
\texttt{int \funnm{chmod}(const char *\emph{path}, mode\_t \emph{mode});}
\begin{itemize}
\item zmìní pøístupová práva souboru \texttt{path} na hodnotu
\texttt{mode}.
\item tuto slu¾bu mù¾e volat pouze vlastník souboru nebo
superu¾ivatel (root). 
\end{itemize}
\texttt{int \funnm{chown}(const char *\emph{path}, uid\_t \emph{owner},
gid\_t \emph{group});}
\begin{itemize}
\item zmìní vlastníka a skupinu souboru \texttt{path}. Hodnota
\texttt{-1} znamená zachovat vlastníka, resp. skupinu. 
\item mìnit vlastníka mù¾e jen superu¾ivatel, aby u¾ivatelé nemohli
obcházet nastavené quoty tím, ¾e své soubory pøedají nìkomu jinému. 
\item bì¾ný u¾ivatel mù¾e mìnit skupinu svých souborù a musí pøitom
patøit do cílové skupiny.
\end{itemize}
\end{slide}

\begin{itemize}
\item parametr \texttt{mode} zde samozøejmì neobsahuje typ souboru,
jako tomu je na\-pøí\-klad u volání \texttt{stat}. Hodnoty
\texttt{mode} viz \texttt{chmod}(2).
\item pokud nejsem vlastník, nemohu celkem logicky zmìnit mód ani u
souboru s nastaveným pøístupem \texttt{rw-rw-rw-}
\item v nìkterých implementacích mù¾e vlastník souboru pøedat
vlastnictví nì\-ko\-mu jinému, napø. v IRIXu je chování \texttt{chown}
nastavitelné jako parametr jádra.
\item není bì¾né volat funkci \texttt{chmod} z u¾ivatelských
aplikací, na to se pou¾ívají flagy u volání \texttt{open}, hlavní
pou¾ití je v aplikaci \texttt{chmod(1)}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item pokud nejsem root, tak chmod vycisti set uid/gid. Viz
priklad z Rochkinda na strane 183.
\item proc bych chtel mit chown i pro usery? Treba proto, abych
nekomu mohl dat soubor tak, aniz by ho nekdo jiny mohl precist. Tj.
nastavit ho 0600 a pak mu ho predat. Workaround muze byt nastavit si
adresar na --x a rict userovi jmeno, protoze ani vlastni skupina to
uplne neresi\dots
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{link, unlink, rename}{link}

\begin{slide}
\sltitle{Manipulace se jmény souborù}
\texttt{int \funnm{link}(const char *\emph{path1}, const char *\emph{path2});}
\begin{itemize}
\item vytvoøí nový odkaz (polo¾ku adresáøe) \texttt{path2} na soubor
\texttt{path1}. Funguje pouze v rámci jednoho svazku. 
\end{itemize}
\texttt{ int \funnm{unlink}(const char *\emph{path});}
\begin{itemize}
\item zru¹í odkaz na soubor. Po zru¹ení posledního odkazu na soubor
a uzavøení souboru v¹emi procesy je soubor smazán. 
\end{itemize}
\texttt{int \funnm{rename}(const char *\emph{old}, const char *\emph{new});}
\begin{itemize}
\item zmìní jméno souboru (pøesnì odkazu na soubor) z \texttt{old}
na \texttt{new}. Funguje pouze v rámci jednoho svazku.
\end{itemize}
\end{slide}

\begin{itemize}
\item opìt zdùrazòuji, ¾e \emsl{u{}nix nemá volání typu delete na soubory}.
Po\-drob\-nì\-ji viz strana \pageref{FILEDELETE}.
\item volání \texttt{link} vytváøí hardlinky, tj. zobrazení ze
jména souboru na èíslo i-uzlu. Èísla i-uzlù jsou jednoznaèná pouze v
rámci svazku, proto pro linky mezi filesystémy je nutné pou¾ít
symlinky.
\item parametr \texttt{path2} nesmí existovat, tedy nelze takto
pøejmenovávat
\item \texttt{unlink} nefunguje na adresáøe
\item shellový pøíkaz \texttt{mv} pou¾ívá \texttt{rename} pro
pøesuny v rámci jednoho svazku. Pøesun souboru mezi filesystémy
vy¾aduje nejprve soubor zkopírovat a pak smazat originál voláním
\texttt{unlink}.
\item \texttt{rename} funguje nad symlinky, ne nad soubory, na
které symlink ukazuje
\item existuje i volání \texttt{remove}, viz strana \pageref{REMOVE}.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item kod mv je hodne slozity, viz Rochkind (nekde, uz nevim kde,
mel konkretni priklady)
\item poradne si projed rename a jak by jinak mohl udelat -- link a
pak unlink. Ale link na adresar nelze udelat, nekde to mohl pouze
root, takze by mv mohl byt set-uid atd.
\end{itemize}
]]])

%%%%%

\pdfbookmark[1]{symlink, readlink}{symlink}

\begin{slide}
\sltitle{Symbolické linky}
\texttt{int \funnm{symlink}(const char *\emph{path1},
const char *\emph{path2});} 
\begin{itemize}
\item vytvoøí symbolický link \texttt{path2} $\rightarrow$
\texttt{path1}.
\item cíl symbolického linku mù¾e být i na jiném svazku, popøípadì
nemusí vùbec existovat. 
\end{itemize}
\texttt{int \funnm{readlink}(const char *\emph{path}, char *\emph{buf},
size\_t \emph{bufsize});} 
\begin{itemize}
\item do \texttt{buf} dá max. \texttt{bufsize} znakù z cesty, na
kterou ukazuje symlink path. 
\item vrátí poèet znakù ulo¾ených do \texttt{buf}. 
\item obsah buf není zakonèen nulou (znakem \verb#'\0'#)!
\end{itemize}
\end{slide}

\begin{itemize}
\item Shellový pøíkaz \texttt{ln} volá \texttt{symlink} nebo
\texttt{link}, podle toho, jestli je pou¾it pøe\-pí\-naè \texttt{-s}
nebo ne.
\item Smazání hardlinku nesma¾e soubor, pokud na nìj vede je¹tì jiný
hardlink. Naopak soubor (polo¾ku adresáøe i data) je mo¾né smazat, i
kdy¾ na nìj ukazují nìjaké symlinky.
\item \texttt{readlink} je pou¾itelný v situaci, pokud chci
smazat soubor, na který daný symlink ukazuje
\item \texttt{bufsize} se typicky dává o 1 men¹í ne¾ velikost
bufferu, to pro ukonèení znakem \verb#'\0'#
\end{itemize}

%%%%%

\pdfbookmark[1]{mkdir, rmdir, opendir, readdir, closedir}{dirfncs}

\begin{slide}
\sltitle{Manipulace s adresáøi}
\texttt{int \funnm{mkdir}(const char *\emph{path}, mode\_t \emph{mode});}
\begin{itemize}
\item vytvoøí nový prázdný adresáø, který bude obsahovat pouze polo¾ky
'\texttt{.}' a '\texttt{..}' 
\end{itemize}
\texttt{int \funnm{rmdir}(const char *\emph{path});}
\begin{itemize}
\item sma¾e adresáø \texttt{path}. Adresáø musí být prázdný. 
\end{itemize}
\texttt{DIR *\funnm{opendir}(const char *\emph{dirname});\\
struct dirent *\funnm{readdir}(DIR *\emph{dirp});\\
int \funnm{closedir}(DIR *\emph{dirp});}
\begin{itemize}
\item slou¾í k sekvenènímu procházení adresáøù. 
\item struktura dirent obsahuje polo¾ky 
    \begin{itemize}
    \item \verb#d_ino# \dots{} èíslo i-uzlu 
    \item \verb#d_name# \dots{} jméno souboru
    \end{itemize}
\end{itemize}
\end{slide}

\begin{itemize}
\item Polo¾ky adresáøe nejsou nijak uspoøádány, \texttt{readdir} je mù¾e vracet
v libovolném poøadí. V pøípadì chyby se vrací NULL jako pøedtím a \texttt{errno}
je nastaveno. Konec adresáøe se signalizuje tím, ¾e \texttt{readdir} vrátí NULL
a \texttt{errno} není zmìnìno.
\item \texttt{readdir} je stavová funkce. Pro vrácení se na zaèátek je mo¾né
pou¾ít funkci \texttt{rewinddir}. Pokud tuto funkci voláte z více vláken je
nutné pou¾ívat reentrantní \texttt{readdir\_r}, proto¾e struktura
\texttt{dirent} je statická.
\item V nìkterých implementacích (napø. FreeBSD) lze adresáø otevøít pro ètení
(ne pro zápis) jako normální soubor a èíst ho pomocí \texttt{read}, ale je tøeba
znát jeho vnitøní organizaci. Proto je \texttt{readdir} pro zpracování obsahu
adresáøe lep¹í ne¾ \texttt{read}, který vrací raw data adresáøe. Kromì toho,
norma nevy¾aduje, aby adresáø bylo mo¾né èíst funkcí \texttt{read}, Linux to
napøíklad nedovolí.
\item \texttt{d\_ino} není moc u¾iteèné, proto¾e v pøípadì, kdy daný adresáø je
mount point, tak ukazuje na adresáø, na který je dal¹í filesystém namontován, ne
na koøen namontovaného filesystému
\item \label{D_TYPE} Nìkteré systémy mají ve struktuøe \texttt{dirent} polo¾ku
\texttt{d\_type}. Ta mù¾e nabývat hodnot \texttt{DT\_REG}, \texttt{DT\_DIR},
\texttt{DT\_FIFO} atd., viz manuálová stránka pro \texttt{dirent}. Byla to vìc
specifická pro BSD a následnì pøevzatá i jinými systémy, na\-pøí\-klad Linuxem.
Není to souèástí normy a tedy to \emsl{není pøenositelné.} Pøe\-no\-si\-tel\-ný
zpùsob je na ka¾dou polo¾ku zavolat \texttt{stat}.
\item \texttt{rmdir} nefunguje na neprázdný adresáø, musíte sami smazat jeho
obsah pøed smazáním adresáøe. Nìkdy lze v kódu nalézt zoufalé pokusy typu
\texttt{system("rm -r xxx")} co¾ má svoje nevýhody (napø. závislost programu
na shellu. Dále pozor na sanitizaci promìnných prostøedí a jména adresáøe).
\item \label{REMOVE} Norma specifikuje i volání \texttt{remove}, které se chová
jako \texttt{unlink} pro regulární soubory, a jako \texttt{rmdir} pro adresáøe.
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item ukaz otevreni adresare ve ViM
\end{itemize}
]]])

%%%%%

\begin{slide}
\sltitle{Pøíklad: procházení adresáøe}
\begin{alltt}
int main(int argc, char *argv[])
\{
    int i;
    DIR *d;
    struct dirent *de;
    for(i = 1; i < argc; i++) \{
        d = \emprg{opendir}(argv[i]);
        while(de = \emprg{readdir}(d))
            printf("%s\bs{}n", de->d_name);
        \emprg{closedir}(d);
    \} 
    return (0);
\}
\end{alltt}
\end{slide}

\begin{itemize}
\item pøíkaz \texttt{ls} je zalo¾en na takovéto smyèce, navíc
provádí napø. tøídìní jmen souborù a zji¹»ování dal¹ích informací
pomocí \texttt{stat}.
\item konec adresáøe se pozná tak, ¾e \texttt{readdir} vrátí
\texttt{NULL}. To v¹ak vrátí i v pøípadì, pokud nastala chyba. V
takovém pøípadì je kód chyby v promìnné \texttt{errno}, v pøípadì
prvním je \texttt{errno} nezmìnìna. Proto by \texttt{errno} mìlo být
v¾dy nastavené na nulu pøed voláním \texttt{readdir}. V pøíkladu
tomu tak není, proto¾e z dùvodu málo místa nekontrolujeme
\texttt{errno} vùbec.
\item pøíklad: \priklad{readdir/readdir.c}
\end{itemize}

%%%%%

\pdfbookmark[1]{chdir, fchdir, getcwd}{pwd}

\begin{slide}
\sltitle{Aktuální adresáø procesu}
\begin{itemize}
\item ka¾dý proces má svùj aktuální (pracovní) adresáø, vùèi kterému
jsou udávány relativní cesty k souborùm. Poèáteèní nastavení
pracovního adresáøe se dìdí od otce pøi vzniku procesu. 
\end{itemize}
\texttt{int \funnm{chdir}(const char *\emph{path});}\\
\texttt{int \funnm{fchdir}(int \emph{fildes});}
\begin{itemize}
\item nastaví nový pracovní adresáø procesu.
\end{itemize}
\texttt{char *\funnm{getcwd}(char *\emph{buf}, size\_t \emph{size});}
\begin{itemize}
\item ulo¾í absolutní cestu k aktuálnímu adresáøi do pole
\texttt{buf}, jeho délka (\texttt{size}) musí být aspoò o 1 vìt¹í
ne¾ délka cesty.
\end{itemize}
\end{slide}

\begin{itemize}
\item funkci \texttt{fchdir} se pøedává deskriptor získaný voláním
\texttt{open} na adresáø.
\item funkce \texttt{getcwd} mù¾e vrátit jinou cestu ne¾ tu, po které jsme
se do ak\-tu\-ál\-ní\-ho adresáøe dostali, jesli¾e èást cesty v
\texttt{chdir} byl symlink nebo do¹lo k pøesunu (pøejmenování) nìkterého
adresáøe na cestì od koøene. U souèasných u{}nixù by se to ale u¾ stát nemìlo.
\item na vìt¹inì moderních unixových systémù existuje funkce \texttt{chroot},
která u\-mo¾\-òu\-je zmìnit koøenový adresáø volajícího procesu na daný
adresáø. Je èasto pou¾ívaná v implementací serverù k omezení pøístupu
pouze na daný podstrom file systému (napø. FTP servery).
Pokud se pou¾ívá pro zapezpeèení, vy¾aduje to zvlá¹tní opatrnost,
proto¾e existují cesty jak se dostat do pù\-vod\-ní\-ho stromu.
Pokud je nutné z chroot prostøedí spou¹tìt programy, nastávají dal¹í
komplikace s nutností replikace kritických systémových souborù do chroot
prostøedí (pokud není program upraven aby mìl v¹e zabudované v sobì).
Tato funkce není souèástí aktuální verze standardu (POSIX 1003.1-2008).
\begin{itemize}
\item dal¹í, mnohem obecnìj¹í, zpùsoby izolace procesù se dají nalézt v
unixových systémech (jails v FreeBSD, zones v Solarisu, sandboxing v Mac
OS X). Zpravidla se velmi li¹í tím jaké hranice doká¾í vytyèit, k èemu
jsou urèeny, zpùsobem administrace, \ldots.
\end{itemize}
\end{itemize}

ifdef([[[PRIVATE]]], [[[ \hrulefill
\begin{itemize}
\item Popis na \url{http://www.bpfh.net/simes/computing/chroot-break.html}
ukazuje jak se dostat z chrootu pokud je u¾ivatel root. Správné pou¾ití je
toto:
\begin{verbatim}
chdir("/foo/bar");
chroot("/foo/bar");
setuid(non zero UID);
\end{verbatim}
Pak by nemìlo být mo¾né dostat se ven, pokud tedy neexistuje vulnerability
která by umo¾nila získat zpìt root privilegia.
\end{itemize}
]]])

\endinput
